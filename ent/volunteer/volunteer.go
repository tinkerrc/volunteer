// Code generated by ent, DO NOT EDIT.

package volunteer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the volunteer type in the database.
	Label = "volunteer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// EdgeVolunteerRecords holds the string denoting the volunteer_records edge name in mutations.
	EdgeVolunteerRecords = "volunteer_records"
	// Table holds the table name of the volunteer in the database.
	Table = "volunteers"
	// VolunteerRecordsTable is the table that holds the volunteer_records relation/edge.
	VolunteerRecordsTable = "event_volunteers"
	// VolunteerRecordsInverseTable is the table name for the EventVolunteer entity.
	// It exists in this package in order to avoid circular dependency with the "eventvolunteer" package.
	VolunteerRecordsInverseTable = "event_volunteers"
	// VolunteerRecordsColumn is the table column denoting the volunteer_records relation/edge.
	VolunteerRecordsColumn = "event_volunteer_volunteer"
)

// Columns holds all SQL columns for volunteer fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldFirstName,
	FieldMiddleName,
	FieldLastName,
	FieldPhone,
	FieldAddress,
	FieldNotes,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Volunteer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByMiddleName orders the results by the middle_name field.
func ByMiddleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMiddleName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByVolunteerRecordsCount orders the results by volunteer_records count.
func ByVolunteerRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVolunteerRecordsStep(), opts...)
	}
}

// ByVolunteerRecords orders the results by volunteer_records terms.
func ByVolunteerRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVolunteerRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVolunteerRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VolunteerRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VolunteerRecordsTable, VolunteerRecordsColumn),
	)
}
