// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/event"
	"github.com/tinkerrc/volunteer/ent/eventvolunteer"
	"github.com/tinkerrc/volunteer/ent/predicate"
	"github.com/tinkerrc/volunteer/ent/volunteer"
)

// EventVolunteerUpdate is the builder for updating EventVolunteer entities.
type EventVolunteerUpdate struct {
	config
	hooks    []Hook
	mutation *EventVolunteerMutation
}

// Where appends a list predicates to the EventVolunteerUpdate builder.
func (evu *EventVolunteerUpdate) Where(ps ...predicate.EventVolunteer) *EventVolunteerUpdate {
	evu.mutation.Where(ps...)
	return evu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (evu *EventVolunteerUpdate) SetEventID(id uuid.UUID) *EventVolunteerUpdate {
	evu.mutation.SetEventID(id)
	return evu
}

// SetEvent sets the "event" edge to the Event entity.
func (evu *EventVolunteerUpdate) SetEvent(e *Event) *EventVolunteerUpdate {
	return evu.SetEventID(e.ID)
}

// SetVolunteerID sets the "volunteer" edge to the Volunteer entity by ID.
func (evu *EventVolunteerUpdate) SetVolunteerID(id uuid.UUID) *EventVolunteerUpdate {
	evu.mutation.SetVolunteerID(id)
	return evu
}

// SetVolunteer sets the "volunteer" edge to the Volunteer entity.
func (evu *EventVolunteerUpdate) SetVolunteer(v *Volunteer) *EventVolunteerUpdate {
	return evu.SetVolunteerID(v.ID)
}

// Mutation returns the EventVolunteerMutation object of the builder.
func (evu *EventVolunteerUpdate) Mutation() *EventVolunteerMutation {
	return evu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (evu *EventVolunteerUpdate) ClearEvent() *EventVolunteerUpdate {
	evu.mutation.ClearEvent()
	return evu
}

// ClearVolunteer clears the "volunteer" edge to the Volunteer entity.
func (evu *EventVolunteerUpdate) ClearVolunteer() *EventVolunteerUpdate {
	evu.mutation.ClearVolunteer()
	return evu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (evu *EventVolunteerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, evu.sqlSave, evu.mutation, evu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evu *EventVolunteerUpdate) SaveX(ctx context.Context) int {
	affected, err := evu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (evu *EventVolunteerUpdate) Exec(ctx context.Context) error {
	_, err := evu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evu *EventVolunteerUpdate) ExecX(ctx context.Context) {
	if err := evu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evu *EventVolunteerUpdate) check() error {
	if evu.mutation.EventCleared() && len(evu.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventVolunteer.event"`)
	}
	if evu.mutation.VolunteerCleared() && len(evu.mutation.VolunteerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventVolunteer.volunteer"`)
	}
	return nil
}

func (evu *EventVolunteerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := evu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventvolunteer.Table, eventvolunteer.Columns, sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID))
	if ps := evu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if evu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.EventTable,
			Columns: []string{eventvolunteer.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := evu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.EventTable,
			Columns: []string{eventvolunteer.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if evu.mutation.VolunteerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.VolunteerTable,
			Columns: []string{eventvolunteer.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := evu.mutation.VolunteerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.VolunteerTable,
			Columns: []string{eventvolunteer.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, evu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventvolunteer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	evu.mutation.done = true
	return n, nil
}

// EventVolunteerUpdateOne is the builder for updating a single EventVolunteer entity.
type EventVolunteerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventVolunteerMutation
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (evuo *EventVolunteerUpdateOne) SetEventID(id uuid.UUID) *EventVolunteerUpdateOne {
	evuo.mutation.SetEventID(id)
	return evuo
}

// SetEvent sets the "event" edge to the Event entity.
func (evuo *EventVolunteerUpdateOne) SetEvent(e *Event) *EventVolunteerUpdateOne {
	return evuo.SetEventID(e.ID)
}

// SetVolunteerID sets the "volunteer" edge to the Volunteer entity by ID.
func (evuo *EventVolunteerUpdateOne) SetVolunteerID(id uuid.UUID) *EventVolunteerUpdateOne {
	evuo.mutation.SetVolunteerID(id)
	return evuo
}

// SetVolunteer sets the "volunteer" edge to the Volunteer entity.
func (evuo *EventVolunteerUpdateOne) SetVolunteer(v *Volunteer) *EventVolunteerUpdateOne {
	return evuo.SetVolunteerID(v.ID)
}

// Mutation returns the EventVolunteerMutation object of the builder.
func (evuo *EventVolunteerUpdateOne) Mutation() *EventVolunteerMutation {
	return evuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (evuo *EventVolunteerUpdateOne) ClearEvent() *EventVolunteerUpdateOne {
	evuo.mutation.ClearEvent()
	return evuo
}

// ClearVolunteer clears the "volunteer" edge to the Volunteer entity.
func (evuo *EventVolunteerUpdateOne) ClearVolunteer() *EventVolunteerUpdateOne {
	evuo.mutation.ClearVolunteer()
	return evuo
}

// Where appends a list predicates to the EventVolunteerUpdate builder.
func (evuo *EventVolunteerUpdateOne) Where(ps ...predicate.EventVolunteer) *EventVolunteerUpdateOne {
	evuo.mutation.Where(ps...)
	return evuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (evuo *EventVolunteerUpdateOne) Select(field string, fields ...string) *EventVolunteerUpdateOne {
	evuo.fields = append([]string{field}, fields...)
	return evuo
}

// Save executes the query and returns the updated EventVolunteer entity.
func (evuo *EventVolunteerUpdateOne) Save(ctx context.Context) (*EventVolunteer, error) {
	return withHooks(ctx, evuo.sqlSave, evuo.mutation, evuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evuo *EventVolunteerUpdateOne) SaveX(ctx context.Context) *EventVolunteer {
	node, err := evuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (evuo *EventVolunteerUpdateOne) Exec(ctx context.Context) error {
	_, err := evuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evuo *EventVolunteerUpdateOne) ExecX(ctx context.Context) {
	if err := evuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evuo *EventVolunteerUpdateOne) check() error {
	if evuo.mutation.EventCleared() && len(evuo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventVolunteer.event"`)
	}
	if evuo.mutation.VolunteerCleared() && len(evuo.mutation.VolunteerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EventVolunteer.volunteer"`)
	}
	return nil
}

func (evuo *EventVolunteerUpdateOne) sqlSave(ctx context.Context) (_node *EventVolunteer, err error) {
	if err := evuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(eventvolunteer.Table, eventvolunteer.Columns, sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID))
	id, ok := evuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EventVolunteer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := evuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventvolunteer.FieldID)
		for _, f := range fields {
			if !eventvolunteer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != eventvolunteer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := evuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if evuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.EventTable,
			Columns: []string{eventvolunteer.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := evuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.EventTable,
			Columns: []string{eventvolunteer.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if evuo.mutation.VolunteerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.VolunteerTable,
			Columns: []string{eventvolunteer.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := evuo.mutation.VolunteerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.VolunteerTable,
			Columns: []string{eventvolunteer.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EventVolunteer{config: evuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, evuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eventvolunteer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	evuo.mutation.done = true
	return _node, nil
}
