// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/event"
	"github.com/tinkerrc/volunteer/ent/eventvolunteer"
	"github.com/tinkerrc/volunteer/ent/volunteer"
)

// EventVolunteer is the model entity for the EventVolunteer schema.
type EventVolunteer struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventVolunteerQuery when eager-loading is set.
	Edges                     EventVolunteerEdges `json:"edges"`
	event_volunteer_event     *uuid.UUID
	event_volunteer_volunteer *uuid.UUID
	selectValues              sql.SelectValues
}

// EventVolunteerEdges holds the relations/edges for other nodes in the graph.
type EventVolunteerEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Volunteer holds the value of the volunteer edge.
	Volunteer *Volunteer `json:"volunteer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventVolunteerEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// VolunteerOrErr returns the Volunteer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventVolunteerEdges) VolunteerOrErr() (*Volunteer, error) {
	if e.Volunteer != nil {
		return e.Volunteer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: volunteer.Label}
	}
	return nil, &NotLoadedError{edge: "volunteer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventVolunteer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventvolunteer.FieldID:
			values[i] = new(uuid.UUID)
		case eventvolunteer.ForeignKeys[0]: // event_volunteer_event
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case eventvolunteer.ForeignKeys[1]: // event_volunteer_volunteer
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventVolunteer fields.
func (ev *EventVolunteer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventvolunteer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ev.ID = *value
			}
		case eventvolunteer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field event_volunteer_event", values[i])
			} else if value.Valid {
				ev.event_volunteer_event = new(uuid.UUID)
				*ev.event_volunteer_event = *value.S.(*uuid.UUID)
			}
		case eventvolunteer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field event_volunteer_volunteer", values[i])
			} else if value.Valid {
				ev.event_volunteer_volunteer = new(uuid.UUID)
				*ev.event_volunteer_volunteer = *value.S.(*uuid.UUID)
			}
		default:
			ev.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventVolunteer.
// This includes values selected through modifiers, order, etc.
func (ev *EventVolunteer) Value(name string) (ent.Value, error) {
	return ev.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the EventVolunteer entity.
func (ev *EventVolunteer) QueryEvent() *EventQuery {
	return NewEventVolunteerClient(ev.config).QueryEvent(ev)
}

// QueryVolunteer queries the "volunteer" edge of the EventVolunteer entity.
func (ev *EventVolunteer) QueryVolunteer() *VolunteerQuery {
	return NewEventVolunteerClient(ev.config).QueryVolunteer(ev)
}

// Update returns a builder for updating this EventVolunteer.
// Note that you need to call EventVolunteer.Unwrap() before calling this method if this EventVolunteer
// was returned from a transaction, and the transaction was committed or rolled back.
func (ev *EventVolunteer) Update() *EventVolunteerUpdateOne {
	return NewEventVolunteerClient(ev.config).UpdateOne(ev)
}

// Unwrap unwraps the EventVolunteer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ev *EventVolunteer) Unwrap() *EventVolunteer {
	_tx, ok := ev.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventVolunteer is not a transactional entity")
	}
	ev.config.driver = _tx.drv
	return ev
}

// String implements the fmt.Stringer.
func (ev *EventVolunteer) String() string {
	var builder strings.Builder
	builder.WriteString("EventVolunteer(")
	builder.WriteString(fmt.Sprintf("id=%v", ev.ID))
	builder.WriteByte(')')
	return builder.String()
}

// EventVolunteers is a parsable slice of EventVolunteer.
type EventVolunteers []*EventVolunteer
