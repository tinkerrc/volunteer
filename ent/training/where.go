// Code generated by ent, DO NOT EDIT.

package training

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldID, id))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldEndDate, v))
}

// IsCertified applies equality check predicate on the "is_certified" field. It's identical to IsCertifiedEQ.
func IsCertified(v bool) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldIsCertified, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Training {
	return predicate.Training(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Training {
	return predicate.Training(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Training {
	return predicate.Training(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Training {
	return predicate.Training(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Training {
	return predicate.Training(sql.FieldNotNull(FieldEndDate))
}

// IsCertifiedEQ applies the EQ predicate on the "is_certified" field.
func IsCertifiedEQ(v bool) predicate.Training {
	return predicate.Training(sql.FieldEQ(FieldIsCertified, v))
}

// IsCertifiedNEQ applies the NEQ predicate on the "is_certified" field.
func IsCertifiedNEQ(v bool) predicate.Training {
	return predicate.Training(sql.FieldNEQ(FieldIsCertified, v))
}

// HasVolunteer applies the HasEdge predicate on the "volunteer" edge.
func HasVolunteer() predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VolunteerTable, VolunteerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVolunteerWith applies the HasEdge predicate on the "volunteer" edge with a given conditions (other predicates).
func HasVolunteerWith(preds ...predicate.Volunteer) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := newVolunteerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCert applies the HasEdge predicate on the "cert" edge.
func HasCert() predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CertTable, CertColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertWith applies the HasEdge predicate on the "cert" edge with a given conditions (other predicates).
func HasCertWith(preds ...predicate.Cert) predicate.Training {
	return predicate.Training(func(s *sql.Selector) {
		step := newCertStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Training) predicate.Training {
	return predicate.Training(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Training) predicate.Training {
	return predicate.Training(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Training) predicate.Training {
	return predicate.Training(sql.NotPredicates(p))
}
