// Code generated by ent, DO NOT EDIT.

package training

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the training type in the database.
	Label = "training"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldIsCertified holds the string denoting the is_certified field in the database.
	FieldIsCertified = "is_certified"
	// EdgeVolunteer holds the string denoting the volunteer edge name in mutations.
	EdgeVolunteer = "volunteer"
	// EdgeCert holds the string denoting the cert edge name in mutations.
	EdgeCert = "cert"
	// Table holds the table name of the training in the database.
	Table = "trainings"
	// VolunteerTable is the table that holds the volunteer relation/edge.
	VolunteerTable = "trainings"
	// VolunteerInverseTable is the table name for the Volunteer entity.
	// It exists in this package in order to avoid circular dependency with the "volunteer" package.
	VolunteerInverseTable = "volunteers"
	// VolunteerColumn is the table column denoting the volunteer relation/edge.
	VolunteerColumn = "training_volunteer"
	// CertTable is the table that holds the cert relation/edge.
	CertTable = "trainings"
	// CertInverseTable is the table name for the Cert entity.
	// It exists in this package in order to avoid circular dependency with the "cert" package.
	CertInverseTable = "certs"
	// CertColumn is the table column denoting the cert relation/edge.
	CertColumn = "training_cert"
)

// Columns holds all SQL columns for training fields.
var Columns = []string{
	FieldID,
	FieldStartDate,
	FieldEndDate,
	FieldIsCertified,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "trainings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"training_volunteer",
	"training_cert",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStartDate holds the default value on creation for the "start_date" field.
	DefaultStartDate func() time.Time
	// DefaultIsCertified holds the default value on creation for the "is_certified" field.
	DefaultIsCertified bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Training queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByIsCertified orders the results by the is_certified field.
func ByIsCertified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCertified, opts...).ToFunc()
}

// ByVolunteerField orders the results by volunteer field.
func ByVolunteerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVolunteerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCertField orders the results by cert field.
func ByCertField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCertStep(), sql.OrderByField(field, opts...))
	}
}
func newVolunteerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VolunteerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VolunteerTable, VolunteerColumn),
	)
}
func newCertStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CertInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CertTable, CertColumn),
	)
}
