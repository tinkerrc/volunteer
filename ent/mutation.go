// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/cert"
	"github.com/tinkerrc/volunteer/ent/event"
	"github.com/tinkerrc/volunteer/ent/eventvolunteer"
	"github.com/tinkerrc/volunteer/ent/predicate"
	"github.com/tinkerrc/volunteer/ent/timelog"
	"github.com/tinkerrc/volunteer/ent/training"
	"github.com/tinkerrc/volunteer/ent/user"
	"github.com/tinkerrc/volunteer/ent/volunteer"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCert           = "Cert"
	TypeEvent          = "Event"
	TypeEventVolunteer = "EventVolunteer"
	TypeTimeLog        = "TimeLog"
	TypeTraining       = "Training"
	TypeUser           = "User"
	TypeVolunteer      = "Volunteer"
)

// CertMutation represents an operation that mutates the Cert nodes in the graph.
type CertMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	description   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Cert, error)
	predicates    []predicate.Cert
}

var _ ent.Mutation = (*CertMutation)(nil)

// certOption allows management of the mutation configuration using functional options.
type certOption func(*CertMutation)

// newCertMutation creates new mutation for the Cert entity.
func newCertMutation(c config, op Op, opts ...certOption) *CertMutation {
	m := &CertMutation{
		config:        c,
		op:            op,
		typ:           TypeCert,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCertID sets the ID field of the mutation.
func withCertID(id uuid.UUID) certOption {
	return func(m *CertMutation) {
		var (
			err   error
			once  sync.Once
			value *Cert
		)
		m.oldValue = func(ctx context.Context) (*Cert, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cert.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCert sets the old Cert of the mutation.
func withCert(node *Cert) certOption {
	return func(m *CertMutation) {
		m.oldValue = func(context.Context) (*Cert, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CertMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CertMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Cert entities.
func (m *CertMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CertMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CertMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cert.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CertMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CertMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Cert entity.
// If the Cert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CertMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *CertMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CertMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Cert entity.
// If the Cert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *CertMutation) ResetDescription() {
	m.description = nil
}

// Where appends a list predicates to the CertMutation builder.
func (m *CertMutation) Where(ps ...predicate.Cert) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CertMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CertMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Cert, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CertMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CertMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Cert).
func (m *CertMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CertMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, cert.FieldName)
	}
	if m.description != nil {
		fields = append(fields, cert.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CertMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cert.FieldName:
		return m.Name()
	case cert.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CertMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cert.FieldName:
		return m.OldName(ctx)
	case cert.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Cert field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CertMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cert.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case cert.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Cert field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CertMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CertMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CertMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Cert numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CertMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CertMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CertMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Cert nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CertMutation) ResetField(name string) error {
	switch name {
	case cert.FieldName:
		m.ResetName()
		return nil
	case cert.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Cert field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CertMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CertMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CertMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CertMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CertMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CertMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CertMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Cert unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CertMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Cert edge %s", name)
}

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	description   *string
	start         *time.Time
	end           *time.Time
	clearedFields map[string]struct{}
	certs         map[uuid.UUID]struct{}
	removedcerts  map[uuid.UUID]struct{}
	clearedcerts  bool
	done          bool
	oldValue      func(context.Context) (*Event, error)
	predicates    []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id uuid.UUID) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Event entities.
func (m *EventMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *EventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EventMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *EventMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EventMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *EventMutation) ResetDescription() {
	m.description = nil
}

// SetStart sets the "start" field.
func (m *EventMutation) SetStart(t time.Time) {
	m.start = &t
}

// Start returns the value of the "start" field in the mutation.
func (m *EventMutation) Start() (r time.Time, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// ResetStart resets all changes to the "start" field.
func (m *EventMutation) ResetStart() {
	m.start = nil
}

// SetEnd sets the "end" field.
func (m *EventMutation) SetEnd(t time.Time) {
	m.end = &t
}

// End returns the value of the "end" field in the mutation.
func (m *EventMutation) End() (r time.Time, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEnd(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// ResetEnd resets all changes to the "end" field.
func (m *EventMutation) ResetEnd() {
	m.end = nil
}

// AddCertIDs adds the "certs" edge to the Cert entity by ids.
func (m *EventMutation) AddCertIDs(ids ...uuid.UUID) {
	if m.certs == nil {
		m.certs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.certs[ids[i]] = struct{}{}
	}
}

// ClearCerts clears the "certs" edge to the Cert entity.
func (m *EventMutation) ClearCerts() {
	m.clearedcerts = true
}

// CertsCleared reports if the "certs" edge to the Cert entity was cleared.
func (m *EventMutation) CertsCleared() bool {
	return m.clearedcerts
}

// RemoveCertIDs removes the "certs" edge to the Cert entity by IDs.
func (m *EventMutation) RemoveCertIDs(ids ...uuid.UUID) {
	if m.removedcerts == nil {
		m.removedcerts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.certs, ids[i])
		m.removedcerts[ids[i]] = struct{}{}
	}
}

// RemovedCerts returns the removed IDs of the "certs" edge to the Cert entity.
func (m *EventMutation) RemovedCertsIDs() (ids []uuid.UUID) {
	for id := range m.removedcerts {
		ids = append(ids, id)
	}
	return
}

// CertsIDs returns the "certs" edge IDs in the mutation.
func (m *EventMutation) CertsIDs() (ids []uuid.UUID) {
	for id := range m.certs {
		ids = append(ids, id)
	}
	return
}

// ResetCerts resets all changes to the "certs" edge.
func (m *EventMutation) ResetCerts() {
	m.certs = nil
	m.clearedcerts = false
	m.removedcerts = nil
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, event.FieldName)
	}
	if m.description != nil {
		fields = append(fields, event.FieldDescription)
	}
	if m.start != nil {
		fields = append(fields, event.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, event.FieldEnd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldName:
		return m.Name()
	case event.FieldDescription:
		return m.Description()
	case event.FieldStart:
		return m.Start()
	case event.FieldEnd:
		return m.End()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldName:
		return m.OldName(ctx)
	case event.FieldDescription:
		return m.OldDescription(ctx)
	case event.FieldStart:
		return m.OldStart(ctx)
	case event.FieldEnd:
		return m.OldEnd(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case event.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case event.FieldStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case event.FieldEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldName:
		m.ResetName()
		return nil
	case event.FieldDescription:
		m.ResetDescription()
		return nil
	case event.FieldStart:
		m.ResetStart()
		return nil
	case event.FieldEnd:
		m.ResetEnd()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.certs != nil {
		edges = append(edges, event.EdgeCerts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeCerts:
		ids := make([]ent.Value, 0, len(m.certs))
		for id := range m.certs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcerts != nil {
		edges = append(edges, event.EdgeCerts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeCerts:
		ids := make([]ent.Value, 0, len(m.removedcerts))
		for id := range m.removedcerts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcerts {
		edges = append(edges, event.EdgeCerts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeCerts:
		return m.clearedcerts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeCerts:
		m.ResetCerts()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// EventVolunteerMutation represents an operation that mutates the EventVolunteer nodes in the graph.
type EventVolunteerMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	clearedFields    map[string]struct{}
	event            *uuid.UUID
	clearedevent     bool
	volunteer        *uuid.UUID
	clearedvolunteer bool
	done             bool
	oldValue         func(context.Context) (*EventVolunteer, error)
	predicates       []predicate.EventVolunteer
}

var _ ent.Mutation = (*EventVolunteerMutation)(nil)

// eventvolunteerOption allows management of the mutation configuration using functional options.
type eventvolunteerOption func(*EventVolunteerMutation)

// newEventVolunteerMutation creates new mutation for the EventVolunteer entity.
func newEventVolunteerMutation(c config, op Op, opts ...eventvolunteerOption) *EventVolunteerMutation {
	m := &EventVolunteerMutation{
		config:        c,
		op:            op,
		typ:           TypeEventVolunteer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventVolunteerID sets the ID field of the mutation.
func withEventVolunteerID(id uuid.UUID) eventvolunteerOption {
	return func(m *EventVolunteerMutation) {
		var (
			err   error
			once  sync.Once
			value *EventVolunteer
		)
		m.oldValue = func(ctx context.Context) (*EventVolunteer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EventVolunteer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEventVolunteer sets the old EventVolunteer of the mutation.
func withEventVolunteer(node *EventVolunteer) eventvolunteerOption {
	return func(m *EventVolunteerMutation) {
		m.oldValue = func(context.Context) (*EventVolunteer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventVolunteerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventVolunteerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EventVolunteer entities.
func (m *EventVolunteerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventVolunteerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventVolunteerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EventVolunteer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *EventVolunteerMutation) SetEventID(id uuid.UUID) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *EventVolunteerMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *EventVolunteerMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *EventVolunteerMutation) EventID() (id uuid.UUID, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *EventVolunteerMutation) EventIDs() (ids []uuid.UUID) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *EventVolunteerMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// SetVolunteerID sets the "volunteer" edge to the Volunteer entity by id.
func (m *EventVolunteerMutation) SetVolunteerID(id uuid.UUID) {
	m.volunteer = &id
}

// ClearVolunteer clears the "volunteer" edge to the Volunteer entity.
func (m *EventVolunteerMutation) ClearVolunteer() {
	m.clearedvolunteer = true
}

// VolunteerCleared reports if the "volunteer" edge to the Volunteer entity was cleared.
func (m *EventVolunteerMutation) VolunteerCleared() bool {
	return m.clearedvolunteer
}

// VolunteerID returns the "volunteer" edge ID in the mutation.
func (m *EventVolunteerMutation) VolunteerID() (id uuid.UUID, exists bool) {
	if m.volunteer != nil {
		return *m.volunteer, true
	}
	return
}

// VolunteerIDs returns the "volunteer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VolunteerID instead. It exists only for internal usage by the builders.
func (m *EventVolunteerMutation) VolunteerIDs() (ids []uuid.UUID) {
	if id := m.volunteer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVolunteer resets all changes to the "volunteer" edge.
func (m *EventVolunteerMutation) ResetVolunteer() {
	m.volunteer = nil
	m.clearedvolunteer = false
}

// Where appends a list predicates to the EventVolunteerMutation builder.
func (m *EventVolunteerMutation) Where(ps ...predicate.EventVolunteer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventVolunteerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventVolunteerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EventVolunteer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventVolunteerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventVolunteerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EventVolunteer).
func (m *EventVolunteerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventVolunteerMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventVolunteerMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventVolunteerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown EventVolunteer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventVolunteerMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EventVolunteer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventVolunteerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventVolunteerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventVolunteerMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown EventVolunteer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventVolunteerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventVolunteerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventVolunteerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EventVolunteer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventVolunteerMutation) ResetField(name string) error {
	return fmt.Errorf("unknown EventVolunteer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventVolunteerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.event != nil {
		edges = append(edges, eventvolunteer.EdgeEvent)
	}
	if m.volunteer != nil {
		edges = append(edges, eventvolunteer.EdgeVolunteer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventVolunteerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case eventvolunteer.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	case eventvolunteer.EdgeVolunteer:
		if id := m.volunteer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventVolunteerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventVolunteerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventVolunteerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedevent {
		edges = append(edges, eventvolunteer.EdgeEvent)
	}
	if m.clearedvolunteer {
		edges = append(edges, eventvolunteer.EdgeVolunteer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventVolunteerMutation) EdgeCleared(name string) bool {
	switch name {
	case eventvolunteer.EdgeEvent:
		return m.clearedevent
	case eventvolunteer.EdgeVolunteer:
		return m.clearedvolunteer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventVolunteerMutation) ClearEdge(name string) error {
	switch name {
	case eventvolunteer.EdgeEvent:
		m.ClearEvent()
		return nil
	case eventvolunteer.EdgeVolunteer:
		m.ClearVolunteer()
		return nil
	}
	return fmt.Errorf("unknown EventVolunteer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventVolunteerMutation) ResetEdge(name string) error {
	switch name {
	case eventvolunteer.EdgeEvent:
		m.ResetEvent()
		return nil
	case eventvolunteer.EdgeVolunteer:
		m.ResetVolunteer()
		return nil
	}
	return fmt.Errorf("unknown EventVolunteer edge %s", name)
}

// TimeLogMutation represents an operation that mutates the TimeLog nodes in the graph.
type TimeLogMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	hours            *int
	addhours         *int
	minutes          *int
	addminutes       *int
	date             *time.Time
	clearedFields    map[string]struct{}
	volunteer        *uuid.UUID
	clearedvolunteer bool
	event            *uuid.UUID
	clearedevent     bool
	done             bool
	oldValue         func(context.Context) (*TimeLog, error)
	predicates       []predicate.TimeLog
}

var _ ent.Mutation = (*TimeLogMutation)(nil)

// timelogOption allows management of the mutation configuration using functional options.
type timelogOption func(*TimeLogMutation)

// newTimeLogMutation creates new mutation for the TimeLog entity.
func newTimeLogMutation(c config, op Op, opts ...timelogOption) *TimeLogMutation {
	m := &TimeLogMutation{
		config:        c,
		op:            op,
		typ:           TypeTimeLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTimeLogID sets the ID field of the mutation.
func withTimeLogID(id uuid.UUID) timelogOption {
	return func(m *TimeLogMutation) {
		var (
			err   error
			once  sync.Once
			value *TimeLog
		)
		m.oldValue = func(ctx context.Context) (*TimeLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TimeLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTimeLog sets the old TimeLog of the mutation.
func withTimeLog(node *TimeLog) timelogOption {
	return func(m *TimeLogMutation) {
		m.oldValue = func(context.Context) (*TimeLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TimeLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TimeLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TimeLog entities.
func (m *TimeLogMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TimeLogMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TimeLogMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TimeLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHours sets the "hours" field.
func (m *TimeLogMutation) SetHours(i int) {
	m.hours = &i
	m.addhours = nil
}

// Hours returns the value of the "hours" field in the mutation.
func (m *TimeLogMutation) Hours() (r int, exists bool) {
	v := m.hours
	if v == nil {
		return
	}
	return *v, true
}

// OldHours returns the old "hours" field's value of the TimeLog entity.
// If the TimeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TimeLogMutation) OldHours(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHours: %w", err)
	}
	return oldValue.Hours, nil
}

// AddHours adds i to the "hours" field.
func (m *TimeLogMutation) AddHours(i int) {
	if m.addhours != nil {
		*m.addhours += i
	} else {
		m.addhours = &i
	}
}

// AddedHours returns the value that was added to the "hours" field in this mutation.
func (m *TimeLogMutation) AddedHours() (r int, exists bool) {
	v := m.addhours
	if v == nil {
		return
	}
	return *v, true
}

// ResetHours resets all changes to the "hours" field.
func (m *TimeLogMutation) ResetHours() {
	m.hours = nil
	m.addhours = nil
}

// SetMinutes sets the "minutes" field.
func (m *TimeLogMutation) SetMinutes(i int) {
	m.minutes = &i
	m.addminutes = nil
}

// Minutes returns the value of the "minutes" field in the mutation.
func (m *TimeLogMutation) Minutes() (r int, exists bool) {
	v := m.minutes
	if v == nil {
		return
	}
	return *v, true
}

// OldMinutes returns the old "minutes" field's value of the TimeLog entity.
// If the TimeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TimeLogMutation) OldMinutes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinutes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinutes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinutes: %w", err)
	}
	return oldValue.Minutes, nil
}

// AddMinutes adds i to the "minutes" field.
func (m *TimeLogMutation) AddMinutes(i int) {
	if m.addminutes != nil {
		*m.addminutes += i
	} else {
		m.addminutes = &i
	}
}

// AddedMinutes returns the value that was added to the "minutes" field in this mutation.
func (m *TimeLogMutation) AddedMinutes() (r int, exists bool) {
	v := m.addminutes
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinutes resets all changes to the "minutes" field.
func (m *TimeLogMutation) ResetMinutes() {
	m.minutes = nil
	m.addminutes = nil
}

// SetDate sets the "date" field.
func (m *TimeLogMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *TimeLogMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the TimeLog entity.
// If the TimeLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TimeLogMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *TimeLogMutation) ResetDate() {
	m.date = nil
}

// SetVolunteerID sets the "volunteer" edge to the Volunteer entity by id.
func (m *TimeLogMutation) SetVolunteerID(id uuid.UUID) {
	m.volunteer = &id
}

// ClearVolunteer clears the "volunteer" edge to the Volunteer entity.
func (m *TimeLogMutation) ClearVolunteer() {
	m.clearedvolunteer = true
}

// VolunteerCleared reports if the "volunteer" edge to the Volunteer entity was cleared.
func (m *TimeLogMutation) VolunteerCleared() bool {
	return m.clearedvolunteer
}

// VolunteerID returns the "volunteer" edge ID in the mutation.
func (m *TimeLogMutation) VolunteerID() (id uuid.UUID, exists bool) {
	if m.volunteer != nil {
		return *m.volunteer, true
	}
	return
}

// VolunteerIDs returns the "volunteer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VolunteerID instead. It exists only for internal usage by the builders.
func (m *TimeLogMutation) VolunteerIDs() (ids []uuid.UUID) {
	if id := m.volunteer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVolunteer resets all changes to the "volunteer" edge.
func (m *TimeLogMutation) ResetVolunteer() {
	m.volunteer = nil
	m.clearedvolunteer = false
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *TimeLogMutation) SetEventID(id uuid.UUID) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *TimeLogMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *TimeLogMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *TimeLogMutation) EventID() (id uuid.UUID, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *TimeLogMutation) EventIDs() (ids []uuid.UUID) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *TimeLogMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the TimeLogMutation builder.
func (m *TimeLogMutation) Where(ps ...predicate.TimeLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TimeLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TimeLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TimeLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TimeLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TimeLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TimeLog).
func (m *TimeLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TimeLogMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.hours != nil {
		fields = append(fields, timelog.FieldHours)
	}
	if m.minutes != nil {
		fields = append(fields, timelog.FieldMinutes)
	}
	if m.date != nil {
		fields = append(fields, timelog.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TimeLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case timelog.FieldHours:
		return m.Hours()
	case timelog.FieldMinutes:
		return m.Minutes()
	case timelog.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TimeLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case timelog.FieldHours:
		return m.OldHours(ctx)
	case timelog.FieldMinutes:
		return m.OldMinutes(ctx)
	case timelog.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown TimeLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TimeLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case timelog.FieldHours:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHours(v)
		return nil
	case timelog.FieldMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinutes(v)
		return nil
	case timelog.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown TimeLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TimeLogMutation) AddedFields() []string {
	var fields []string
	if m.addhours != nil {
		fields = append(fields, timelog.FieldHours)
	}
	if m.addminutes != nil {
		fields = append(fields, timelog.FieldMinutes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TimeLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case timelog.FieldHours:
		return m.AddedHours()
	case timelog.FieldMinutes:
		return m.AddedMinutes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TimeLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case timelog.FieldHours:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHours(v)
		return nil
	case timelog.FieldMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinutes(v)
		return nil
	}
	return fmt.Errorf("unknown TimeLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TimeLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TimeLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TimeLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TimeLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TimeLogMutation) ResetField(name string) error {
	switch name {
	case timelog.FieldHours:
		m.ResetHours()
		return nil
	case timelog.FieldMinutes:
		m.ResetMinutes()
		return nil
	case timelog.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown TimeLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TimeLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.volunteer != nil {
		edges = append(edges, timelog.EdgeVolunteer)
	}
	if m.event != nil {
		edges = append(edges, timelog.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TimeLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case timelog.EdgeVolunteer:
		if id := m.volunteer; id != nil {
			return []ent.Value{*id}
		}
	case timelog.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TimeLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TimeLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TimeLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvolunteer {
		edges = append(edges, timelog.EdgeVolunteer)
	}
	if m.clearedevent {
		edges = append(edges, timelog.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TimeLogMutation) EdgeCleared(name string) bool {
	switch name {
	case timelog.EdgeVolunteer:
		return m.clearedvolunteer
	case timelog.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TimeLogMutation) ClearEdge(name string) error {
	switch name {
	case timelog.EdgeVolunteer:
		m.ClearVolunteer()
		return nil
	case timelog.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown TimeLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TimeLogMutation) ResetEdge(name string) error {
	switch name {
	case timelog.EdgeVolunteer:
		m.ResetVolunteer()
		return nil
	case timelog.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown TimeLog edge %s", name)
}

// TrainingMutation represents an operation that mutates the Training nodes in the graph.
type TrainingMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	start_date       *time.Time
	end_date         *time.Time
	is_certified     *bool
	clearedFields    map[string]struct{}
	volunteer        *uuid.UUID
	clearedvolunteer bool
	cert             *uuid.UUID
	clearedcert      bool
	done             bool
	oldValue         func(context.Context) (*Training, error)
	predicates       []predicate.Training
}

var _ ent.Mutation = (*TrainingMutation)(nil)

// trainingOption allows management of the mutation configuration using functional options.
type trainingOption func(*TrainingMutation)

// newTrainingMutation creates new mutation for the Training entity.
func newTrainingMutation(c config, op Op, opts ...trainingOption) *TrainingMutation {
	m := &TrainingMutation{
		config:        c,
		op:            op,
		typ:           TypeTraining,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrainingID sets the ID field of the mutation.
func withTrainingID(id uuid.UUID) trainingOption {
	return func(m *TrainingMutation) {
		var (
			err   error
			once  sync.Once
			value *Training
		)
		m.oldValue = func(ctx context.Context) (*Training, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Training.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTraining sets the old Training of the mutation.
func withTraining(node *Training) trainingOption {
	return func(m *TrainingMutation) {
		m.oldValue = func(context.Context) (*Training, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrainingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrainingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Training entities.
func (m *TrainingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrainingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrainingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Training.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStartDate sets the "start_date" field.
func (m *TrainingMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *TrainingMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *TrainingMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *TrainingMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *TrainingMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldEndDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *TrainingMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[training.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *TrainingMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[training.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *TrainingMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, training.FieldEndDate)
}

// SetIsCertified sets the "is_certified" field.
func (m *TrainingMutation) SetIsCertified(b bool) {
	m.is_certified = &b
}

// IsCertified returns the value of the "is_certified" field in the mutation.
func (m *TrainingMutation) IsCertified() (r bool, exists bool) {
	v := m.is_certified
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCertified returns the old "is_certified" field's value of the Training entity.
// If the Training object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrainingMutation) OldIsCertified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCertified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCertified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCertified: %w", err)
	}
	return oldValue.IsCertified, nil
}

// ResetIsCertified resets all changes to the "is_certified" field.
func (m *TrainingMutation) ResetIsCertified() {
	m.is_certified = nil
}

// SetVolunteerID sets the "volunteer" edge to the Volunteer entity by id.
func (m *TrainingMutation) SetVolunteerID(id uuid.UUID) {
	m.volunteer = &id
}

// ClearVolunteer clears the "volunteer" edge to the Volunteer entity.
func (m *TrainingMutation) ClearVolunteer() {
	m.clearedvolunteer = true
}

// VolunteerCleared reports if the "volunteer" edge to the Volunteer entity was cleared.
func (m *TrainingMutation) VolunteerCleared() bool {
	return m.clearedvolunteer
}

// VolunteerID returns the "volunteer" edge ID in the mutation.
func (m *TrainingMutation) VolunteerID() (id uuid.UUID, exists bool) {
	if m.volunteer != nil {
		return *m.volunteer, true
	}
	return
}

// VolunteerIDs returns the "volunteer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VolunteerID instead. It exists only for internal usage by the builders.
func (m *TrainingMutation) VolunteerIDs() (ids []uuid.UUID) {
	if id := m.volunteer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVolunteer resets all changes to the "volunteer" edge.
func (m *TrainingMutation) ResetVolunteer() {
	m.volunteer = nil
	m.clearedvolunteer = false
}

// SetCertID sets the "cert" edge to the Cert entity by id.
func (m *TrainingMutation) SetCertID(id uuid.UUID) {
	m.cert = &id
}

// ClearCert clears the "cert" edge to the Cert entity.
func (m *TrainingMutation) ClearCert() {
	m.clearedcert = true
}

// CertCleared reports if the "cert" edge to the Cert entity was cleared.
func (m *TrainingMutation) CertCleared() bool {
	return m.clearedcert
}

// CertID returns the "cert" edge ID in the mutation.
func (m *TrainingMutation) CertID() (id uuid.UUID, exists bool) {
	if m.cert != nil {
		return *m.cert, true
	}
	return
}

// CertIDs returns the "cert" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CertID instead. It exists only for internal usage by the builders.
func (m *TrainingMutation) CertIDs() (ids []uuid.UUID) {
	if id := m.cert; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCert resets all changes to the "cert" edge.
func (m *TrainingMutation) ResetCert() {
	m.cert = nil
	m.clearedcert = false
}

// Where appends a list predicates to the TrainingMutation builder.
func (m *TrainingMutation) Where(ps ...predicate.Training) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TrainingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TrainingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Training, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TrainingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TrainingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Training).
func (m *TrainingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrainingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.start_date != nil {
		fields = append(fields, training.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, training.FieldEndDate)
	}
	if m.is_certified != nil {
		fields = append(fields, training.FieldIsCertified)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrainingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case training.FieldStartDate:
		return m.StartDate()
	case training.FieldEndDate:
		return m.EndDate()
	case training.FieldIsCertified:
		return m.IsCertified()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrainingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case training.FieldStartDate:
		return m.OldStartDate(ctx)
	case training.FieldEndDate:
		return m.OldEndDate(ctx)
	case training.FieldIsCertified:
		return m.OldIsCertified(ctx)
	}
	return nil, fmt.Errorf("unknown Training field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrainingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case training.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case training.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case training.FieldIsCertified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCertified(v)
		return nil
	}
	return fmt.Errorf("unknown Training field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrainingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrainingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrainingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Training numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrainingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(training.FieldEndDate) {
		fields = append(fields, training.FieldEndDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrainingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrainingMutation) ClearField(name string) error {
	switch name {
	case training.FieldEndDate:
		m.ClearEndDate()
		return nil
	}
	return fmt.Errorf("unknown Training nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrainingMutation) ResetField(name string) error {
	switch name {
	case training.FieldStartDate:
		m.ResetStartDate()
		return nil
	case training.FieldEndDate:
		m.ResetEndDate()
		return nil
	case training.FieldIsCertified:
		m.ResetIsCertified()
		return nil
	}
	return fmt.Errorf("unknown Training field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrainingMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.volunteer != nil {
		edges = append(edges, training.EdgeVolunteer)
	}
	if m.cert != nil {
		edges = append(edges, training.EdgeCert)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrainingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case training.EdgeVolunteer:
		if id := m.volunteer; id != nil {
			return []ent.Value{*id}
		}
	case training.EdgeCert:
		if id := m.cert; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrainingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrainingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrainingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvolunteer {
		edges = append(edges, training.EdgeVolunteer)
	}
	if m.clearedcert {
		edges = append(edges, training.EdgeCert)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrainingMutation) EdgeCleared(name string) bool {
	switch name {
	case training.EdgeVolunteer:
		return m.clearedvolunteer
	case training.EdgeCert:
		return m.clearedcert
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrainingMutation) ClearEdge(name string) error {
	switch name {
	case training.EdgeVolunteer:
		m.ClearVolunteer()
		return nil
	case training.EdgeCert:
		m.ClearCert()
		return nil
	}
	return fmt.Errorf("unknown Training unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrainingMutation) ResetEdge(name string) error {
	switch name {
	case training.EdgeVolunteer:
		m.ResetVolunteer()
		return nil
	case training.EdgeCert:
		m.ResetCert()
		return nil
	}
	return fmt.Errorf("unknown Training edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	email         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// VolunteerMutation represents an operation that mutates the Volunteer nodes in the graph.
type VolunteerMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	email                    *string
	first_name               *string
	middle_name              *string
	last_name                *string
	phone                    *string
	address                  *string
	notes                    *string
	clearedFields            map[string]struct{}
	volunteer_records        map[uuid.UUID]struct{}
	removedvolunteer_records map[uuid.UUID]struct{}
	clearedvolunteer_records bool
	trainings                map[uuid.UUID]struct{}
	removedtrainings         map[uuid.UUID]struct{}
	clearedtrainings         bool
	done                     bool
	oldValue                 func(context.Context) (*Volunteer, error)
	predicates               []predicate.Volunteer
}

var _ ent.Mutation = (*VolunteerMutation)(nil)

// volunteerOption allows management of the mutation configuration using functional options.
type volunteerOption func(*VolunteerMutation)

// newVolunteerMutation creates new mutation for the Volunteer entity.
func newVolunteerMutation(c config, op Op, opts ...volunteerOption) *VolunteerMutation {
	m := &VolunteerMutation{
		config:        c,
		op:            op,
		typ:           TypeVolunteer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVolunteerID sets the ID field of the mutation.
func withVolunteerID(id uuid.UUID) volunteerOption {
	return func(m *VolunteerMutation) {
		var (
			err   error
			once  sync.Once
			value *Volunteer
		)
		m.oldValue = func(ctx context.Context) (*Volunteer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Volunteer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVolunteer sets the old Volunteer of the mutation.
func withVolunteer(node *Volunteer) volunteerOption {
	return func(m *VolunteerMutation) {
		m.oldValue = func(context.Context) (*Volunteer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VolunteerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VolunteerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Volunteer entities.
func (m *VolunteerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VolunteerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VolunteerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Volunteer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *VolunteerMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *VolunteerMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Volunteer entity.
// If the Volunteer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VolunteerMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *VolunteerMutation) ResetEmail() {
	m.email = nil
}

// SetFirstName sets the "first_name" field.
func (m *VolunteerMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *VolunteerMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Volunteer entity.
// If the Volunteer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VolunteerMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *VolunteerMutation) ResetFirstName() {
	m.first_name = nil
}

// SetMiddleName sets the "middle_name" field.
func (m *VolunteerMutation) SetMiddleName(s string) {
	m.middle_name = &s
}

// MiddleName returns the value of the "middle_name" field in the mutation.
func (m *VolunteerMutation) MiddleName() (r string, exists bool) {
	v := m.middle_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMiddleName returns the old "middle_name" field's value of the Volunteer entity.
// If the Volunteer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VolunteerMutation) OldMiddleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMiddleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMiddleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMiddleName: %w", err)
	}
	return oldValue.MiddleName, nil
}

// ResetMiddleName resets all changes to the "middle_name" field.
func (m *VolunteerMutation) ResetMiddleName() {
	m.middle_name = nil
}

// SetLastName sets the "last_name" field.
func (m *VolunteerMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *VolunteerMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Volunteer entity.
// If the Volunteer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VolunteerMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *VolunteerMutation) ResetLastName() {
	m.last_name = nil
}

// SetPhone sets the "phone" field.
func (m *VolunteerMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *VolunteerMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Volunteer entity.
// If the Volunteer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VolunteerMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *VolunteerMutation) ResetPhone() {
	m.phone = nil
}

// SetAddress sets the "address" field.
func (m *VolunteerMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *VolunteerMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Volunteer entity.
// If the Volunteer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VolunteerMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *VolunteerMutation) ResetAddress() {
	m.address = nil
}

// SetNotes sets the "notes" field.
func (m *VolunteerMutation) SetNotes(s string) {
	m.notes = &s
}

// Notes returns the value of the "notes" field in the mutation.
func (m *VolunteerMutation) Notes() (r string, exists bool) {
	v := m.notes
	if v == nil {
		return
	}
	return *v, true
}

// OldNotes returns the old "notes" field's value of the Volunteer entity.
// If the Volunteer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VolunteerMutation) OldNotes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotes: %w", err)
	}
	return oldValue.Notes, nil
}

// ResetNotes resets all changes to the "notes" field.
func (m *VolunteerMutation) ResetNotes() {
	m.notes = nil
}

// AddVolunteerRecordIDs adds the "volunteer_records" edge to the EventVolunteer entity by ids.
func (m *VolunteerMutation) AddVolunteerRecordIDs(ids ...uuid.UUID) {
	if m.volunteer_records == nil {
		m.volunteer_records = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.volunteer_records[ids[i]] = struct{}{}
	}
}

// ClearVolunteerRecords clears the "volunteer_records" edge to the EventVolunteer entity.
func (m *VolunteerMutation) ClearVolunteerRecords() {
	m.clearedvolunteer_records = true
}

// VolunteerRecordsCleared reports if the "volunteer_records" edge to the EventVolunteer entity was cleared.
func (m *VolunteerMutation) VolunteerRecordsCleared() bool {
	return m.clearedvolunteer_records
}

// RemoveVolunteerRecordIDs removes the "volunteer_records" edge to the EventVolunteer entity by IDs.
func (m *VolunteerMutation) RemoveVolunteerRecordIDs(ids ...uuid.UUID) {
	if m.removedvolunteer_records == nil {
		m.removedvolunteer_records = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.volunteer_records, ids[i])
		m.removedvolunteer_records[ids[i]] = struct{}{}
	}
}

// RemovedVolunteerRecords returns the removed IDs of the "volunteer_records" edge to the EventVolunteer entity.
func (m *VolunteerMutation) RemovedVolunteerRecordsIDs() (ids []uuid.UUID) {
	for id := range m.removedvolunteer_records {
		ids = append(ids, id)
	}
	return
}

// VolunteerRecordsIDs returns the "volunteer_records" edge IDs in the mutation.
func (m *VolunteerMutation) VolunteerRecordsIDs() (ids []uuid.UUID) {
	for id := range m.volunteer_records {
		ids = append(ids, id)
	}
	return
}

// ResetVolunteerRecords resets all changes to the "volunteer_records" edge.
func (m *VolunteerMutation) ResetVolunteerRecords() {
	m.volunteer_records = nil
	m.clearedvolunteer_records = false
	m.removedvolunteer_records = nil
}

// AddTrainingIDs adds the "trainings" edge to the Training entity by ids.
func (m *VolunteerMutation) AddTrainingIDs(ids ...uuid.UUID) {
	if m.trainings == nil {
		m.trainings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.trainings[ids[i]] = struct{}{}
	}
}

// ClearTrainings clears the "trainings" edge to the Training entity.
func (m *VolunteerMutation) ClearTrainings() {
	m.clearedtrainings = true
}

// TrainingsCleared reports if the "trainings" edge to the Training entity was cleared.
func (m *VolunteerMutation) TrainingsCleared() bool {
	return m.clearedtrainings
}

// RemoveTrainingIDs removes the "trainings" edge to the Training entity by IDs.
func (m *VolunteerMutation) RemoveTrainingIDs(ids ...uuid.UUID) {
	if m.removedtrainings == nil {
		m.removedtrainings = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.trainings, ids[i])
		m.removedtrainings[ids[i]] = struct{}{}
	}
}

// RemovedTrainings returns the removed IDs of the "trainings" edge to the Training entity.
func (m *VolunteerMutation) RemovedTrainingsIDs() (ids []uuid.UUID) {
	for id := range m.removedtrainings {
		ids = append(ids, id)
	}
	return
}

// TrainingsIDs returns the "trainings" edge IDs in the mutation.
func (m *VolunteerMutation) TrainingsIDs() (ids []uuid.UUID) {
	for id := range m.trainings {
		ids = append(ids, id)
	}
	return
}

// ResetTrainings resets all changes to the "trainings" edge.
func (m *VolunteerMutation) ResetTrainings() {
	m.trainings = nil
	m.clearedtrainings = false
	m.removedtrainings = nil
}

// Where appends a list predicates to the VolunteerMutation builder.
func (m *VolunteerMutation) Where(ps ...predicate.Volunteer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VolunteerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VolunteerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Volunteer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VolunteerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VolunteerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Volunteer).
func (m *VolunteerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VolunteerMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.email != nil {
		fields = append(fields, volunteer.FieldEmail)
	}
	if m.first_name != nil {
		fields = append(fields, volunteer.FieldFirstName)
	}
	if m.middle_name != nil {
		fields = append(fields, volunteer.FieldMiddleName)
	}
	if m.last_name != nil {
		fields = append(fields, volunteer.FieldLastName)
	}
	if m.phone != nil {
		fields = append(fields, volunteer.FieldPhone)
	}
	if m.address != nil {
		fields = append(fields, volunteer.FieldAddress)
	}
	if m.notes != nil {
		fields = append(fields, volunteer.FieldNotes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VolunteerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case volunteer.FieldEmail:
		return m.Email()
	case volunteer.FieldFirstName:
		return m.FirstName()
	case volunteer.FieldMiddleName:
		return m.MiddleName()
	case volunteer.FieldLastName:
		return m.LastName()
	case volunteer.FieldPhone:
		return m.Phone()
	case volunteer.FieldAddress:
		return m.Address()
	case volunteer.FieldNotes:
		return m.Notes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VolunteerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case volunteer.FieldEmail:
		return m.OldEmail(ctx)
	case volunteer.FieldFirstName:
		return m.OldFirstName(ctx)
	case volunteer.FieldMiddleName:
		return m.OldMiddleName(ctx)
	case volunteer.FieldLastName:
		return m.OldLastName(ctx)
	case volunteer.FieldPhone:
		return m.OldPhone(ctx)
	case volunteer.FieldAddress:
		return m.OldAddress(ctx)
	case volunteer.FieldNotes:
		return m.OldNotes(ctx)
	}
	return nil, fmt.Errorf("unknown Volunteer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VolunteerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case volunteer.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case volunteer.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case volunteer.FieldMiddleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMiddleName(v)
		return nil
	case volunteer.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case volunteer.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case volunteer.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case volunteer.FieldNotes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotes(v)
		return nil
	}
	return fmt.Errorf("unknown Volunteer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VolunteerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VolunteerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VolunteerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Volunteer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VolunteerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VolunteerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VolunteerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Volunteer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VolunteerMutation) ResetField(name string) error {
	switch name {
	case volunteer.FieldEmail:
		m.ResetEmail()
		return nil
	case volunteer.FieldFirstName:
		m.ResetFirstName()
		return nil
	case volunteer.FieldMiddleName:
		m.ResetMiddleName()
		return nil
	case volunteer.FieldLastName:
		m.ResetLastName()
		return nil
	case volunteer.FieldPhone:
		m.ResetPhone()
		return nil
	case volunteer.FieldAddress:
		m.ResetAddress()
		return nil
	case volunteer.FieldNotes:
		m.ResetNotes()
		return nil
	}
	return fmt.Errorf("unknown Volunteer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VolunteerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.volunteer_records != nil {
		edges = append(edges, volunteer.EdgeVolunteerRecords)
	}
	if m.trainings != nil {
		edges = append(edges, volunteer.EdgeTrainings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VolunteerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case volunteer.EdgeVolunteerRecords:
		ids := make([]ent.Value, 0, len(m.volunteer_records))
		for id := range m.volunteer_records {
			ids = append(ids, id)
		}
		return ids
	case volunteer.EdgeTrainings:
		ids := make([]ent.Value, 0, len(m.trainings))
		for id := range m.trainings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VolunteerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedvolunteer_records != nil {
		edges = append(edges, volunteer.EdgeVolunteerRecords)
	}
	if m.removedtrainings != nil {
		edges = append(edges, volunteer.EdgeTrainings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VolunteerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case volunteer.EdgeVolunteerRecords:
		ids := make([]ent.Value, 0, len(m.removedvolunteer_records))
		for id := range m.removedvolunteer_records {
			ids = append(ids, id)
		}
		return ids
	case volunteer.EdgeTrainings:
		ids := make([]ent.Value, 0, len(m.removedtrainings))
		for id := range m.removedtrainings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VolunteerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedvolunteer_records {
		edges = append(edges, volunteer.EdgeVolunteerRecords)
	}
	if m.clearedtrainings {
		edges = append(edges, volunteer.EdgeTrainings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VolunteerMutation) EdgeCleared(name string) bool {
	switch name {
	case volunteer.EdgeVolunteerRecords:
		return m.clearedvolunteer_records
	case volunteer.EdgeTrainings:
		return m.clearedtrainings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VolunteerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Volunteer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VolunteerMutation) ResetEdge(name string) error {
	switch name {
	case volunteer.EdgeVolunteerRecords:
		m.ResetVolunteerRecords()
		return nil
	case volunteer.EdgeTrainings:
		m.ResetTrainings()
		return nil
	}
	return fmt.Errorf("unknown Volunteer edge %s", name)
}
