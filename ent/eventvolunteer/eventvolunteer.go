// Code generated by ent, DO NOT EDIT.

package eventvolunteer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the eventvolunteer type in the database.
	Label = "event_volunteer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeVolunteer holds the string denoting the volunteer edge name in mutations.
	EdgeVolunteer = "volunteer"
	// Table holds the table name of the eventvolunteer in the database.
	Table = "event_volunteers"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "event_volunteers"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_volunteer_event"
	// VolunteerTable is the table that holds the volunteer relation/edge.
	VolunteerTable = "event_volunteers"
	// VolunteerInverseTable is the table name for the Volunteer entity.
	// It exists in this package in order to avoid circular dependency with the "volunteer" package.
	VolunteerInverseTable = "volunteers"
	// VolunteerColumn is the table column denoting the volunteer relation/edge.
	VolunteerColumn = "event_volunteer_volunteer"
)

// Columns holds all SQL columns for eventvolunteer fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "event_volunteers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_volunteer_event",
	"event_volunteer_volunteer",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the EventVolunteer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByVolunteerField orders the results by volunteer field.
func ByVolunteerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVolunteerStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EventTable, EventColumn),
	)
}
func newVolunteerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VolunteerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VolunteerTable, VolunteerColumn),
	)
}
