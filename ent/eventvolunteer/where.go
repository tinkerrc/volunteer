// Code generated by ent, DO NOT EDIT.

package eventvolunteer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.FieldLTE(FieldID, id))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.EventVolunteer {
	return predicate.EventVolunteer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.EventVolunteer {
	return predicate.EventVolunteer(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVolunteer applies the HasEdge predicate on the "volunteer" edge.
func HasVolunteer() predicate.EventVolunteer {
	return predicate.EventVolunteer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VolunteerTable, VolunteerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVolunteerWith applies the HasEdge predicate on the "volunteer" edge with a given conditions (other predicates).
func HasVolunteerWith(preds ...predicate.Volunteer) predicate.EventVolunteer {
	return predicate.EventVolunteer(func(s *sql.Selector) {
		step := newVolunteerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventVolunteer) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventVolunteer) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventVolunteer) predicate.EventVolunteer {
	return predicate.EventVolunteer(sql.NotPredicates(p))
}
