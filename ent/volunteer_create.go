// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/eventvolunteer"
	"github.com/tinkerrc/volunteer/ent/volunteer"
)

// VolunteerCreate is the builder for creating a Volunteer entity.
type VolunteerCreate struct {
	config
	mutation *VolunteerMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (vc *VolunteerCreate) SetEmail(s string) *VolunteerCreate {
	vc.mutation.SetEmail(s)
	return vc
}

// SetFirstName sets the "first_name" field.
func (vc *VolunteerCreate) SetFirstName(s string) *VolunteerCreate {
	vc.mutation.SetFirstName(s)
	return vc
}

// SetMiddleName sets the "middle_name" field.
func (vc *VolunteerCreate) SetMiddleName(s string) *VolunteerCreate {
	vc.mutation.SetMiddleName(s)
	return vc
}

// SetLastName sets the "last_name" field.
func (vc *VolunteerCreate) SetLastName(s string) *VolunteerCreate {
	vc.mutation.SetLastName(s)
	return vc
}

// SetPhone sets the "phone" field.
func (vc *VolunteerCreate) SetPhone(s string) *VolunteerCreate {
	vc.mutation.SetPhone(s)
	return vc
}

// SetAddress sets the "address" field.
func (vc *VolunteerCreate) SetAddress(s string) *VolunteerCreate {
	vc.mutation.SetAddress(s)
	return vc
}

// SetNotes sets the "notes" field.
func (vc *VolunteerCreate) SetNotes(s string) *VolunteerCreate {
	vc.mutation.SetNotes(s)
	return vc
}

// SetID sets the "id" field.
func (vc *VolunteerCreate) SetID(u uuid.UUID) *VolunteerCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *VolunteerCreate) SetNillableID(u *uuid.UUID) *VolunteerCreate {
	if u != nil {
		vc.SetID(*u)
	}
	return vc
}

// AddVolunteerRecordIDs adds the "volunteer_records" edge to the EventVolunteer entity by IDs.
func (vc *VolunteerCreate) AddVolunteerRecordIDs(ids ...uuid.UUID) *VolunteerCreate {
	vc.mutation.AddVolunteerRecordIDs(ids...)
	return vc
}

// AddVolunteerRecords adds the "volunteer_records" edges to the EventVolunteer entity.
func (vc *VolunteerCreate) AddVolunteerRecords(e ...*EventVolunteer) *VolunteerCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vc.AddVolunteerRecordIDs(ids...)
}

// Mutation returns the VolunteerMutation object of the builder.
func (vc *VolunteerCreate) Mutation() *VolunteerMutation {
	return vc.mutation
}

// Save creates the Volunteer in the database.
func (vc *VolunteerCreate) Save(ctx context.Context) (*Volunteer, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VolunteerCreate) SaveX(ctx context.Context) *Volunteer {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VolunteerCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VolunteerCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VolunteerCreate) defaults() {
	if _, ok := vc.mutation.ID(); !ok {
		v := volunteer.DefaultID()
		vc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VolunteerCreate) check() error {
	if _, ok := vc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Volunteer.email"`)}
	}
	if _, ok := vc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Volunteer.first_name"`)}
	}
	if _, ok := vc.mutation.MiddleName(); !ok {
		return &ValidationError{Name: "middle_name", err: errors.New(`ent: missing required field "Volunteer.middle_name"`)}
	}
	if _, ok := vc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "Volunteer.last_name"`)}
	}
	if _, ok := vc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Volunteer.phone"`)}
	}
	if _, ok := vc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Volunteer.address"`)}
	}
	if _, ok := vc.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`ent: missing required field "Volunteer.notes"`)}
	}
	return nil
}

func (vc *VolunteerCreate) sqlSave(ctx context.Context) (*Volunteer, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VolunteerCreate) createSpec() (*Volunteer, *sqlgraph.CreateSpec) {
	var (
		_node = &Volunteer{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(volunteer.Table, sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.Email(); ok {
		_spec.SetField(volunteer.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := vc.mutation.FirstName(); ok {
		_spec.SetField(volunteer.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := vc.mutation.MiddleName(); ok {
		_spec.SetField(volunteer.FieldMiddleName, field.TypeString, value)
		_node.MiddleName = value
	}
	if value, ok := vc.mutation.LastName(); ok {
		_spec.SetField(volunteer.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := vc.mutation.Phone(); ok {
		_spec.SetField(volunteer.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := vc.mutation.Address(); ok {
		_spec.SetField(volunteer.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := vc.mutation.Notes(); ok {
		_spec.SetField(volunteer.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if nodes := vc.mutation.VolunteerRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   volunteer.VolunteerRecordsTable,
			Columns: []string{volunteer.VolunteerRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VolunteerCreateBulk is the builder for creating many Volunteer entities in bulk.
type VolunteerCreateBulk struct {
	config
	err      error
	builders []*VolunteerCreate
}

// Save creates the Volunteer entities in the database.
func (vcb *VolunteerCreateBulk) Save(ctx context.Context) ([]*Volunteer, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Volunteer, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VolunteerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VolunteerCreateBulk) SaveX(ctx context.Context) []*Volunteer {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VolunteerCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VolunteerCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
