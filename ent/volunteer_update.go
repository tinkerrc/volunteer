// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/eventvolunteer"
	"github.com/tinkerrc/volunteer/ent/predicate"
	"github.com/tinkerrc/volunteer/ent/volunteer"
)

// VolunteerUpdate is the builder for updating Volunteer entities.
type VolunteerUpdate struct {
	config
	hooks    []Hook
	mutation *VolunteerMutation
}

// Where appends a list predicates to the VolunteerUpdate builder.
func (vu *VolunteerUpdate) Where(ps ...predicate.Volunteer) *VolunteerUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetEmail sets the "email" field.
func (vu *VolunteerUpdate) SetEmail(s string) *VolunteerUpdate {
	vu.mutation.SetEmail(s)
	return vu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vu *VolunteerUpdate) SetNillableEmail(s *string) *VolunteerUpdate {
	if s != nil {
		vu.SetEmail(*s)
	}
	return vu
}

// SetFirstName sets the "first_name" field.
func (vu *VolunteerUpdate) SetFirstName(s string) *VolunteerUpdate {
	vu.mutation.SetFirstName(s)
	return vu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (vu *VolunteerUpdate) SetNillableFirstName(s *string) *VolunteerUpdate {
	if s != nil {
		vu.SetFirstName(*s)
	}
	return vu
}

// SetMiddleName sets the "middle_name" field.
func (vu *VolunteerUpdate) SetMiddleName(s string) *VolunteerUpdate {
	vu.mutation.SetMiddleName(s)
	return vu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (vu *VolunteerUpdate) SetNillableMiddleName(s *string) *VolunteerUpdate {
	if s != nil {
		vu.SetMiddleName(*s)
	}
	return vu
}

// SetLastName sets the "last_name" field.
func (vu *VolunteerUpdate) SetLastName(s string) *VolunteerUpdate {
	vu.mutation.SetLastName(s)
	return vu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (vu *VolunteerUpdate) SetNillableLastName(s *string) *VolunteerUpdate {
	if s != nil {
		vu.SetLastName(*s)
	}
	return vu
}

// SetPhone sets the "phone" field.
func (vu *VolunteerUpdate) SetPhone(s string) *VolunteerUpdate {
	vu.mutation.SetPhone(s)
	return vu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (vu *VolunteerUpdate) SetNillablePhone(s *string) *VolunteerUpdate {
	if s != nil {
		vu.SetPhone(*s)
	}
	return vu
}

// SetAddress sets the "address" field.
func (vu *VolunteerUpdate) SetAddress(s string) *VolunteerUpdate {
	vu.mutation.SetAddress(s)
	return vu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vu *VolunteerUpdate) SetNillableAddress(s *string) *VolunteerUpdate {
	if s != nil {
		vu.SetAddress(*s)
	}
	return vu
}

// SetNotes sets the "notes" field.
func (vu *VolunteerUpdate) SetNotes(s string) *VolunteerUpdate {
	vu.mutation.SetNotes(s)
	return vu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (vu *VolunteerUpdate) SetNillableNotes(s *string) *VolunteerUpdate {
	if s != nil {
		vu.SetNotes(*s)
	}
	return vu
}

// AddVolunteerRecordIDs adds the "volunteer_records" edge to the EventVolunteer entity by IDs.
func (vu *VolunteerUpdate) AddVolunteerRecordIDs(ids ...uuid.UUID) *VolunteerUpdate {
	vu.mutation.AddVolunteerRecordIDs(ids...)
	return vu
}

// AddVolunteerRecords adds the "volunteer_records" edges to the EventVolunteer entity.
func (vu *VolunteerUpdate) AddVolunteerRecords(e ...*EventVolunteer) *VolunteerUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vu.AddVolunteerRecordIDs(ids...)
}

// Mutation returns the VolunteerMutation object of the builder.
func (vu *VolunteerUpdate) Mutation() *VolunteerMutation {
	return vu.mutation
}

// ClearVolunteerRecords clears all "volunteer_records" edges to the EventVolunteer entity.
func (vu *VolunteerUpdate) ClearVolunteerRecords() *VolunteerUpdate {
	vu.mutation.ClearVolunteerRecords()
	return vu
}

// RemoveVolunteerRecordIDs removes the "volunteer_records" edge to EventVolunteer entities by IDs.
func (vu *VolunteerUpdate) RemoveVolunteerRecordIDs(ids ...uuid.UUID) *VolunteerUpdate {
	vu.mutation.RemoveVolunteerRecordIDs(ids...)
	return vu
}

// RemoveVolunteerRecords removes "volunteer_records" edges to EventVolunteer entities.
func (vu *VolunteerUpdate) RemoveVolunteerRecords(e ...*EventVolunteer) *VolunteerUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vu.RemoveVolunteerRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VolunteerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VolunteerUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VolunteerUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VolunteerUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VolunteerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(volunteer.Table, volunteer.Columns, sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Email(); ok {
		_spec.SetField(volunteer.FieldEmail, field.TypeString, value)
	}
	if value, ok := vu.mutation.FirstName(); ok {
		_spec.SetField(volunteer.FieldFirstName, field.TypeString, value)
	}
	if value, ok := vu.mutation.MiddleName(); ok {
		_spec.SetField(volunteer.FieldMiddleName, field.TypeString, value)
	}
	if value, ok := vu.mutation.LastName(); ok {
		_spec.SetField(volunteer.FieldLastName, field.TypeString, value)
	}
	if value, ok := vu.mutation.Phone(); ok {
		_spec.SetField(volunteer.FieldPhone, field.TypeString, value)
	}
	if value, ok := vu.mutation.Address(); ok {
		_spec.SetField(volunteer.FieldAddress, field.TypeString, value)
	}
	if value, ok := vu.mutation.Notes(); ok {
		_spec.SetField(volunteer.FieldNotes, field.TypeString, value)
	}
	if vu.mutation.VolunteerRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   volunteer.VolunteerRecordsTable,
			Columns: []string{volunteer.VolunteerRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedVolunteerRecordsIDs(); len(nodes) > 0 && !vu.mutation.VolunteerRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   volunteer.VolunteerRecordsTable,
			Columns: []string{volunteer.VolunteerRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.VolunteerRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   volunteer.VolunteerRecordsTable,
			Columns: []string{volunteer.VolunteerRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volunteer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VolunteerUpdateOne is the builder for updating a single Volunteer entity.
type VolunteerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VolunteerMutation
}

// SetEmail sets the "email" field.
func (vuo *VolunteerUpdateOne) SetEmail(s string) *VolunteerUpdateOne {
	vuo.mutation.SetEmail(s)
	return vuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vuo *VolunteerUpdateOne) SetNillableEmail(s *string) *VolunteerUpdateOne {
	if s != nil {
		vuo.SetEmail(*s)
	}
	return vuo
}

// SetFirstName sets the "first_name" field.
func (vuo *VolunteerUpdateOne) SetFirstName(s string) *VolunteerUpdateOne {
	vuo.mutation.SetFirstName(s)
	return vuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (vuo *VolunteerUpdateOne) SetNillableFirstName(s *string) *VolunteerUpdateOne {
	if s != nil {
		vuo.SetFirstName(*s)
	}
	return vuo
}

// SetMiddleName sets the "middle_name" field.
func (vuo *VolunteerUpdateOne) SetMiddleName(s string) *VolunteerUpdateOne {
	vuo.mutation.SetMiddleName(s)
	return vuo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (vuo *VolunteerUpdateOne) SetNillableMiddleName(s *string) *VolunteerUpdateOne {
	if s != nil {
		vuo.SetMiddleName(*s)
	}
	return vuo
}

// SetLastName sets the "last_name" field.
func (vuo *VolunteerUpdateOne) SetLastName(s string) *VolunteerUpdateOne {
	vuo.mutation.SetLastName(s)
	return vuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (vuo *VolunteerUpdateOne) SetNillableLastName(s *string) *VolunteerUpdateOne {
	if s != nil {
		vuo.SetLastName(*s)
	}
	return vuo
}

// SetPhone sets the "phone" field.
func (vuo *VolunteerUpdateOne) SetPhone(s string) *VolunteerUpdateOne {
	vuo.mutation.SetPhone(s)
	return vuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (vuo *VolunteerUpdateOne) SetNillablePhone(s *string) *VolunteerUpdateOne {
	if s != nil {
		vuo.SetPhone(*s)
	}
	return vuo
}

// SetAddress sets the "address" field.
func (vuo *VolunteerUpdateOne) SetAddress(s string) *VolunteerUpdateOne {
	vuo.mutation.SetAddress(s)
	return vuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vuo *VolunteerUpdateOne) SetNillableAddress(s *string) *VolunteerUpdateOne {
	if s != nil {
		vuo.SetAddress(*s)
	}
	return vuo
}

// SetNotes sets the "notes" field.
func (vuo *VolunteerUpdateOne) SetNotes(s string) *VolunteerUpdateOne {
	vuo.mutation.SetNotes(s)
	return vuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (vuo *VolunteerUpdateOne) SetNillableNotes(s *string) *VolunteerUpdateOne {
	if s != nil {
		vuo.SetNotes(*s)
	}
	return vuo
}

// AddVolunteerRecordIDs adds the "volunteer_records" edge to the EventVolunteer entity by IDs.
func (vuo *VolunteerUpdateOne) AddVolunteerRecordIDs(ids ...uuid.UUID) *VolunteerUpdateOne {
	vuo.mutation.AddVolunteerRecordIDs(ids...)
	return vuo
}

// AddVolunteerRecords adds the "volunteer_records" edges to the EventVolunteer entity.
func (vuo *VolunteerUpdateOne) AddVolunteerRecords(e ...*EventVolunteer) *VolunteerUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vuo.AddVolunteerRecordIDs(ids...)
}

// Mutation returns the VolunteerMutation object of the builder.
func (vuo *VolunteerUpdateOne) Mutation() *VolunteerMutation {
	return vuo.mutation
}

// ClearVolunteerRecords clears all "volunteer_records" edges to the EventVolunteer entity.
func (vuo *VolunteerUpdateOne) ClearVolunteerRecords() *VolunteerUpdateOne {
	vuo.mutation.ClearVolunteerRecords()
	return vuo
}

// RemoveVolunteerRecordIDs removes the "volunteer_records" edge to EventVolunteer entities by IDs.
func (vuo *VolunteerUpdateOne) RemoveVolunteerRecordIDs(ids ...uuid.UUID) *VolunteerUpdateOne {
	vuo.mutation.RemoveVolunteerRecordIDs(ids...)
	return vuo
}

// RemoveVolunteerRecords removes "volunteer_records" edges to EventVolunteer entities.
func (vuo *VolunteerUpdateOne) RemoveVolunteerRecords(e ...*EventVolunteer) *VolunteerUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return vuo.RemoveVolunteerRecordIDs(ids...)
}

// Where appends a list predicates to the VolunteerUpdate builder.
func (vuo *VolunteerUpdateOne) Where(ps ...predicate.Volunteer) *VolunteerUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VolunteerUpdateOne) Select(field string, fields ...string) *VolunteerUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Volunteer entity.
func (vuo *VolunteerUpdateOne) Save(ctx context.Context) (*Volunteer, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VolunteerUpdateOne) SaveX(ctx context.Context) *Volunteer {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VolunteerUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VolunteerUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VolunteerUpdateOne) sqlSave(ctx context.Context) (_node *Volunteer, err error) {
	_spec := sqlgraph.NewUpdateSpec(volunteer.Table, volunteer.Columns, sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Volunteer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, volunteer.FieldID)
		for _, f := range fields {
			if !volunteer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != volunteer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Email(); ok {
		_spec.SetField(volunteer.FieldEmail, field.TypeString, value)
	}
	if value, ok := vuo.mutation.FirstName(); ok {
		_spec.SetField(volunteer.FieldFirstName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.MiddleName(); ok {
		_spec.SetField(volunteer.FieldMiddleName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.LastName(); ok {
		_spec.SetField(volunteer.FieldLastName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Phone(); ok {
		_spec.SetField(volunteer.FieldPhone, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Address(); ok {
		_spec.SetField(volunteer.FieldAddress, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Notes(); ok {
		_spec.SetField(volunteer.FieldNotes, field.TypeString, value)
	}
	if vuo.mutation.VolunteerRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   volunteer.VolunteerRecordsTable,
			Columns: []string{volunteer.VolunteerRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedVolunteerRecordsIDs(); len(nodes) > 0 && !vuo.mutation.VolunteerRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   volunteer.VolunteerRecordsTable,
			Columns: []string{volunteer.VolunteerRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.VolunteerRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   volunteer.VolunteerRecordsTable,
			Columns: []string{volunteer.VolunteerRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Volunteer{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{volunteer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
