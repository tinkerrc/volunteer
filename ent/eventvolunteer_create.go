// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/event"
	"github.com/tinkerrc/volunteer/ent/eventvolunteer"
	"github.com/tinkerrc/volunteer/ent/volunteer"
)

// EventVolunteerCreate is the builder for creating a EventVolunteer entity.
type EventVolunteerCreate struct {
	config
	mutation *EventVolunteerMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (evc *EventVolunteerCreate) SetID(u uuid.UUID) *EventVolunteerCreate {
	evc.mutation.SetID(u)
	return evc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (evc *EventVolunteerCreate) SetNillableID(u *uuid.UUID) *EventVolunteerCreate {
	if u != nil {
		evc.SetID(*u)
	}
	return evc
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (evc *EventVolunteerCreate) SetEventID(id uuid.UUID) *EventVolunteerCreate {
	evc.mutation.SetEventID(id)
	return evc
}

// SetEvent sets the "event" edge to the Event entity.
func (evc *EventVolunteerCreate) SetEvent(e *Event) *EventVolunteerCreate {
	return evc.SetEventID(e.ID)
}

// SetVolunteerID sets the "volunteer" edge to the Volunteer entity by ID.
func (evc *EventVolunteerCreate) SetVolunteerID(id uuid.UUID) *EventVolunteerCreate {
	evc.mutation.SetVolunteerID(id)
	return evc
}

// SetVolunteer sets the "volunteer" edge to the Volunteer entity.
func (evc *EventVolunteerCreate) SetVolunteer(v *Volunteer) *EventVolunteerCreate {
	return evc.SetVolunteerID(v.ID)
}

// Mutation returns the EventVolunteerMutation object of the builder.
func (evc *EventVolunteerCreate) Mutation() *EventVolunteerMutation {
	return evc.mutation
}

// Save creates the EventVolunteer in the database.
func (evc *EventVolunteerCreate) Save(ctx context.Context) (*EventVolunteer, error) {
	evc.defaults()
	return withHooks(ctx, evc.sqlSave, evc.mutation, evc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (evc *EventVolunteerCreate) SaveX(ctx context.Context) *EventVolunteer {
	v, err := evc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (evc *EventVolunteerCreate) Exec(ctx context.Context) error {
	_, err := evc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evc *EventVolunteerCreate) ExecX(ctx context.Context) {
	if err := evc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evc *EventVolunteerCreate) defaults() {
	if _, ok := evc.mutation.ID(); !ok {
		v := eventvolunteer.DefaultID()
		evc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evc *EventVolunteerCreate) check() error {
	if len(evc.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "EventVolunteer.event"`)}
	}
	if len(evc.mutation.VolunteerIDs()) == 0 {
		return &ValidationError{Name: "volunteer", err: errors.New(`ent: missing required edge "EventVolunteer.volunteer"`)}
	}
	return nil
}

func (evc *EventVolunteerCreate) sqlSave(ctx context.Context) (*EventVolunteer, error) {
	if err := evc.check(); err != nil {
		return nil, err
	}
	_node, _spec := evc.createSpec()
	if err := sqlgraph.CreateNode(ctx, evc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	evc.mutation.id = &_node.ID
	evc.mutation.done = true
	return _node, nil
}

func (evc *EventVolunteerCreate) createSpec() (*EventVolunteer, *sqlgraph.CreateSpec) {
	var (
		_node = &EventVolunteer{config: evc.config}
		_spec = sqlgraph.NewCreateSpec(eventvolunteer.Table, sqlgraph.NewFieldSpec(eventvolunteer.FieldID, field.TypeUUID))
	)
	if id, ok := evc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := evc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.EventTable,
			Columns: []string{eventvolunteer.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_volunteer_event = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := evc.mutation.VolunteerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   eventvolunteer.VolunteerTable,
			Columns: []string{eventvolunteer.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_volunteer_volunteer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventVolunteerCreateBulk is the builder for creating many EventVolunteer entities in bulk.
type EventVolunteerCreateBulk struct {
	config
	err      error
	builders []*EventVolunteerCreate
}

// Save creates the EventVolunteer entities in the database.
func (evcb *EventVolunteerCreateBulk) Save(ctx context.Context) ([]*EventVolunteer, error) {
	if evcb.err != nil {
		return nil, evcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(evcb.builders))
	nodes := make([]*EventVolunteer, len(evcb.builders))
	mutators := make([]Mutator, len(evcb.builders))
	for i := range evcb.builders {
		func(i int, root context.Context) {
			builder := evcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventVolunteerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, evcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, evcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, evcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (evcb *EventVolunteerCreateBulk) SaveX(ctx context.Context) []*EventVolunteer {
	v, err := evcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (evcb *EventVolunteerCreateBulk) Exec(ctx context.Context) error {
	_, err := evcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evcb *EventVolunteerCreateBulk) ExecX(ctx context.Context) {
	if err := evcb.Exec(ctx); err != nil {
		panic(err)
	}
}
