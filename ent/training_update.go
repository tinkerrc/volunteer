// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/cert"
	"github.com/tinkerrc/volunteer/ent/predicate"
	"github.com/tinkerrc/volunteer/ent/training"
	"github.com/tinkerrc/volunteer/ent/volunteer"
)

// TrainingUpdate is the builder for updating Training entities.
type TrainingUpdate struct {
	config
	hooks    []Hook
	mutation *TrainingMutation
}

// Where appends a list predicates to the TrainingUpdate builder.
func (tu *TrainingUpdate) Where(ps ...predicate.Training) *TrainingUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetStartDate sets the "start_date" field.
func (tu *TrainingUpdate) SetStartDate(t time.Time) *TrainingUpdate {
	tu.mutation.SetStartDate(t)
	return tu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (tu *TrainingUpdate) SetNillableStartDate(t *time.Time) *TrainingUpdate {
	if t != nil {
		tu.SetStartDate(*t)
	}
	return tu
}

// SetEndDate sets the "end_date" field.
func (tu *TrainingUpdate) SetEndDate(t time.Time) *TrainingUpdate {
	tu.mutation.SetEndDate(t)
	return tu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (tu *TrainingUpdate) SetNillableEndDate(t *time.Time) *TrainingUpdate {
	if t != nil {
		tu.SetEndDate(*t)
	}
	return tu
}

// ClearEndDate clears the value of the "end_date" field.
func (tu *TrainingUpdate) ClearEndDate() *TrainingUpdate {
	tu.mutation.ClearEndDate()
	return tu
}

// SetIsCertified sets the "is_certified" field.
func (tu *TrainingUpdate) SetIsCertified(b bool) *TrainingUpdate {
	tu.mutation.SetIsCertified(b)
	return tu
}

// SetNillableIsCertified sets the "is_certified" field if the given value is not nil.
func (tu *TrainingUpdate) SetNillableIsCertified(b *bool) *TrainingUpdate {
	if b != nil {
		tu.SetIsCertified(*b)
	}
	return tu
}

// SetVolunteerID sets the "volunteer" edge to the Volunteer entity by ID.
func (tu *TrainingUpdate) SetVolunteerID(id uuid.UUID) *TrainingUpdate {
	tu.mutation.SetVolunteerID(id)
	return tu
}

// SetNillableVolunteerID sets the "volunteer" edge to the Volunteer entity by ID if the given value is not nil.
func (tu *TrainingUpdate) SetNillableVolunteerID(id *uuid.UUID) *TrainingUpdate {
	if id != nil {
		tu = tu.SetVolunteerID(*id)
	}
	return tu
}

// SetVolunteer sets the "volunteer" edge to the Volunteer entity.
func (tu *TrainingUpdate) SetVolunteer(v *Volunteer) *TrainingUpdate {
	return tu.SetVolunteerID(v.ID)
}

// SetCertID sets the "cert" edge to the Cert entity by ID.
func (tu *TrainingUpdate) SetCertID(id uuid.UUID) *TrainingUpdate {
	tu.mutation.SetCertID(id)
	return tu
}

// SetNillableCertID sets the "cert" edge to the Cert entity by ID if the given value is not nil.
func (tu *TrainingUpdate) SetNillableCertID(id *uuid.UUID) *TrainingUpdate {
	if id != nil {
		tu = tu.SetCertID(*id)
	}
	return tu
}

// SetCert sets the "cert" edge to the Cert entity.
func (tu *TrainingUpdate) SetCert(c *Cert) *TrainingUpdate {
	return tu.SetCertID(c.ID)
}

// Mutation returns the TrainingMutation object of the builder.
func (tu *TrainingUpdate) Mutation() *TrainingMutation {
	return tu.mutation
}

// ClearVolunteer clears the "volunteer" edge to the Volunteer entity.
func (tu *TrainingUpdate) ClearVolunteer() *TrainingUpdate {
	tu.mutation.ClearVolunteer()
	return tu
}

// ClearCert clears the "cert" edge to the Cert entity.
func (tu *TrainingUpdate) ClearCert() *TrainingUpdate {
	tu.mutation.ClearCert()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrainingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrainingUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrainingUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrainingUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TrainingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(training.Table, training.Columns, sqlgraph.NewFieldSpec(training.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.StartDate(); ok {
		_spec.SetField(training.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := tu.mutation.EndDate(); ok {
		_spec.SetField(training.FieldEndDate, field.TypeTime, value)
	}
	if tu.mutation.EndDateCleared() {
		_spec.ClearField(training.FieldEndDate, field.TypeTime)
	}
	if value, ok := tu.mutation.IsCertified(); ok {
		_spec.SetField(training.FieldIsCertified, field.TypeBool, value)
	}
	if tu.mutation.VolunteerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.VolunteerTable,
			Columns: []string{training.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.VolunteerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.VolunteerTable,
			Columns: []string{training.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.CertTable,
			Columns: []string{training.CertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.CertTable,
			Columns: []string{training.CertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{training.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrainingUpdateOne is the builder for updating a single Training entity.
type TrainingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrainingMutation
}

// SetStartDate sets the "start_date" field.
func (tuo *TrainingUpdateOne) SetStartDate(t time.Time) *TrainingUpdateOne {
	tuo.mutation.SetStartDate(t)
	return tuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (tuo *TrainingUpdateOne) SetNillableStartDate(t *time.Time) *TrainingUpdateOne {
	if t != nil {
		tuo.SetStartDate(*t)
	}
	return tuo
}

// SetEndDate sets the "end_date" field.
func (tuo *TrainingUpdateOne) SetEndDate(t time.Time) *TrainingUpdateOne {
	tuo.mutation.SetEndDate(t)
	return tuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (tuo *TrainingUpdateOne) SetNillableEndDate(t *time.Time) *TrainingUpdateOne {
	if t != nil {
		tuo.SetEndDate(*t)
	}
	return tuo
}

// ClearEndDate clears the value of the "end_date" field.
func (tuo *TrainingUpdateOne) ClearEndDate() *TrainingUpdateOne {
	tuo.mutation.ClearEndDate()
	return tuo
}

// SetIsCertified sets the "is_certified" field.
func (tuo *TrainingUpdateOne) SetIsCertified(b bool) *TrainingUpdateOne {
	tuo.mutation.SetIsCertified(b)
	return tuo
}

// SetNillableIsCertified sets the "is_certified" field if the given value is not nil.
func (tuo *TrainingUpdateOne) SetNillableIsCertified(b *bool) *TrainingUpdateOne {
	if b != nil {
		tuo.SetIsCertified(*b)
	}
	return tuo
}

// SetVolunteerID sets the "volunteer" edge to the Volunteer entity by ID.
func (tuo *TrainingUpdateOne) SetVolunteerID(id uuid.UUID) *TrainingUpdateOne {
	tuo.mutation.SetVolunteerID(id)
	return tuo
}

// SetNillableVolunteerID sets the "volunteer" edge to the Volunteer entity by ID if the given value is not nil.
func (tuo *TrainingUpdateOne) SetNillableVolunteerID(id *uuid.UUID) *TrainingUpdateOne {
	if id != nil {
		tuo = tuo.SetVolunteerID(*id)
	}
	return tuo
}

// SetVolunteer sets the "volunteer" edge to the Volunteer entity.
func (tuo *TrainingUpdateOne) SetVolunteer(v *Volunteer) *TrainingUpdateOne {
	return tuo.SetVolunteerID(v.ID)
}

// SetCertID sets the "cert" edge to the Cert entity by ID.
func (tuo *TrainingUpdateOne) SetCertID(id uuid.UUID) *TrainingUpdateOne {
	tuo.mutation.SetCertID(id)
	return tuo
}

// SetNillableCertID sets the "cert" edge to the Cert entity by ID if the given value is not nil.
func (tuo *TrainingUpdateOne) SetNillableCertID(id *uuid.UUID) *TrainingUpdateOne {
	if id != nil {
		tuo = tuo.SetCertID(*id)
	}
	return tuo
}

// SetCert sets the "cert" edge to the Cert entity.
func (tuo *TrainingUpdateOne) SetCert(c *Cert) *TrainingUpdateOne {
	return tuo.SetCertID(c.ID)
}

// Mutation returns the TrainingMutation object of the builder.
func (tuo *TrainingUpdateOne) Mutation() *TrainingMutation {
	return tuo.mutation
}

// ClearVolunteer clears the "volunteer" edge to the Volunteer entity.
func (tuo *TrainingUpdateOne) ClearVolunteer() *TrainingUpdateOne {
	tuo.mutation.ClearVolunteer()
	return tuo
}

// ClearCert clears the "cert" edge to the Cert entity.
func (tuo *TrainingUpdateOne) ClearCert() *TrainingUpdateOne {
	tuo.mutation.ClearCert()
	return tuo
}

// Where appends a list predicates to the TrainingUpdate builder.
func (tuo *TrainingUpdateOne) Where(ps ...predicate.Training) *TrainingUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrainingUpdateOne) Select(field string, fields ...string) *TrainingUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Training entity.
func (tuo *TrainingUpdateOne) Save(ctx context.Context) (*Training, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrainingUpdateOne) SaveX(ctx context.Context) *Training {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrainingUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrainingUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TrainingUpdateOne) sqlSave(ctx context.Context) (_node *Training, err error) {
	_spec := sqlgraph.NewUpdateSpec(training.Table, training.Columns, sqlgraph.NewFieldSpec(training.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Training.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, training.FieldID)
		for _, f := range fields {
			if !training.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != training.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.StartDate(); ok {
		_spec.SetField(training.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.EndDate(); ok {
		_spec.SetField(training.FieldEndDate, field.TypeTime, value)
	}
	if tuo.mutation.EndDateCleared() {
		_spec.ClearField(training.FieldEndDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.IsCertified(); ok {
		_spec.SetField(training.FieldIsCertified, field.TypeBool, value)
	}
	if tuo.mutation.VolunteerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.VolunteerTable,
			Columns: []string{training.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.VolunteerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.VolunteerTable,
			Columns: []string{training.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CertCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.CertTable,
			Columns: []string{training.CertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cert.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.CertTable,
			Columns: []string{training.CertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Training{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{training.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
