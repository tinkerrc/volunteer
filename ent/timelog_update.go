// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tinkerrc/volunteer/ent/predicate"
	"github.com/tinkerrc/volunteer/ent/timelog"
)

// TimeLogUpdate is the builder for updating TimeLog entities.
type TimeLogUpdate struct {
	config
	hooks    []Hook
	mutation *TimeLogMutation
}

// Where appends a list predicates to the TimeLogUpdate builder.
func (tlu *TimeLogUpdate) Where(ps ...predicate.TimeLog) *TimeLogUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// Mutation returns the TimeLogMutation object of the builder.
func (tlu *TimeLogUpdate) Mutation() *TimeLogMutation {
	return tlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TimeLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TimeLogUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TimeLogUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TimeLogUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tlu *TimeLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(timelog.Table, timelog.Columns, sqlgraph.NewFieldSpec(timelog.FieldID, field.TypeInt))
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TimeLogUpdateOne is the builder for updating a single TimeLog entity.
type TimeLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimeLogMutation
}

// Mutation returns the TimeLogMutation object of the builder.
func (tluo *TimeLogUpdateOne) Mutation() *TimeLogMutation {
	return tluo.mutation
}

// Where appends a list predicates to the TimeLogUpdate builder.
func (tluo *TimeLogUpdateOne) Where(ps ...predicate.TimeLog) *TimeLogUpdateOne {
	tluo.mutation.Where(ps...)
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TimeLogUpdateOne) Select(field string, fields ...string) *TimeLogUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TimeLog entity.
func (tluo *TimeLogUpdateOne) Save(ctx context.Context) (*TimeLog, error) {
	return withHooks(ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TimeLogUpdateOne) SaveX(ctx context.Context) *TimeLog {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TimeLogUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TimeLogUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tluo *TimeLogUpdateOne) sqlSave(ctx context.Context) (_node *TimeLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(timelog.Table, timelog.Columns, sqlgraph.NewFieldSpec(timelog.FieldID, field.TypeInt))
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TimeLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timelog.FieldID)
		for _, f := range fields {
			if !timelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &TimeLog{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
