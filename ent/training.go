// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/cert"
	"github.com/tinkerrc/volunteer/ent/training"
	"github.com/tinkerrc/volunteer/ent/volunteer"
)

// Training is the model entity for the Training schema.
type Training struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// IsCertified holds the value of the "is_certified" field.
	IsCertified bool `json:"is_certified,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrainingQuery when eager-loading is set.
	Edges              TrainingEdges `json:"edges"`
	training_volunteer *uuid.UUID
	training_cert      *uuid.UUID
	selectValues       sql.SelectValues
}

// TrainingEdges holds the relations/edges for other nodes in the graph.
type TrainingEdges struct {
	// Volunteer holds the value of the volunteer edge.
	Volunteer *Volunteer `json:"volunteer,omitempty"`
	// Cert holds the value of the cert edge.
	Cert *Cert `json:"cert,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VolunteerOrErr returns the Volunteer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainingEdges) VolunteerOrErr() (*Volunteer, error) {
	if e.Volunteer != nil {
		return e.Volunteer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: volunteer.Label}
	}
	return nil, &NotLoadedError{edge: "volunteer"}
}

// CertOrErr returns the Cert value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrainingEdges) CertOrErr() (*Cert, error) {
	if e.Cert != nil {
		return e.Cert, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: cert.Label}
	}
	return nil, &NotLoadedError{edge: "cert"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Training) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case training.FieldIsCertified:
			values[i] = new(sql.NullBool)
		case training.FieldStartDate, training.FieldEndDate:
			values[i] = new(sql.NullTime)
		case training.FieldID:
			values[i] = new(uuid.UUID)
		case training.ForeignKeys[0]: // training_volunteer
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case training.ForeignKeys[1]: // training_cert
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Training fields.
func (t *Training) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case training.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case training.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				t.StartDate = value.Time
			}
		case training.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				t.EndDate = value.Time
			}
		case training.FieldIsCertified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_certified", values[i])
			} else if value.Valid {
				t.IsCertified = value.Bool
			}
		case training.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field training_volunteer", values[i])
			} else if value.Valid {
				t.training_volunteer = new(uuid.UUID)
				*t.training_volunteer = *value.S.(*uuid.UUID)
			}
		case training.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field training_cert", values[i])
			} else if value.Valid {
				t.training_cert = new(uuid.UUID)
				*t.training_cert = *value.S.(*uuid.UUID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Training.
// This includes values selected through modifiers, order, etc.
func (t *Training) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryVolunteer queries the "volunteer" edge of the Training entity.
func (t *Training) QueryVolunteer() *VolunteerQuery {
	return NewTrainingClient(t.config).QueryVolunteer(t)
}

// QueryCert queries the "cert" edge of the Training entity.
func (t *Training) QueryCert() *CertQuery {
	return NewTrainingClient(t.config).QueryCert(t)
}

// Update returns a builder for updating this Training.
// Note that you need to call Training.Unwrap() before calling this method if this Training
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Training) Update() *TrainingUpdateOne {
	return NewTrainingClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Training entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Training) Unwrap() *Training {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Training is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Training) String() string {
	var builder strings.Builder
	builder.WriteString("Training(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("start_date=")
	builder.WriteString(t.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(t.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_certified=")
	builder.WriteString(fmt.Sprintf("%v", t.IsCertified))
	builder.WriteByte(')')
	return builder.String()
}

// Trainings is a parsable slice of Training.
type Trainings []*Training
