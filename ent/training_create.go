// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/cert"
	"github.com/tinkerrc/volunteer/ent/training"
	"github.com/tinkerrc/volunteer/ent/volunteer"
)

// TrainingCreate is the builder for creating a Training entity.
type TrainingCreate struct {
	config
	mutation *TrainingMutation
	hooks    []Hook
}

// SetStartDate sets the "start_date" field.
func (tc *TrainingCreate) SetStartDate(t time.Time) *TrainingCreate {
	tc.mutation.SetStartDate(t)
	return tc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableStartDate(t *time.Time) *TrainingCreate {
	if t != nil {
		tc.SetStartDate(*t)
	}
	return tc
}

// SetEndDate sets the "end_date" field.
func (tc *TrainingCreate) SetEndDate(t time.Time) *TrainingCreate {
	tc.mutation.SetEndDate(t)
	return tc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableEndDate(t *time.Time) *TrainingCreate {
	if t != nil {
		tc.SetEndDate(*t)
	}
	return tc
}

// SetIsCertified sets the "is_certified" field.
func (tc *TrainingCreate) SetIsCertified(b bool) *TrainingCreate {
	tc.mutation.SetIsCertified(b)
	return tc
}

// SetNillableIsCertified sets the "is_certified" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableIsCertified(b *bool) *TrainingCreate {
	if b != nil {
		tc.SetIsCertified(*b)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TrainingCreate) SetID(u uuid.UUID) *TrainingCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TrainingCreate) SetNillableID(u *uuid.UUID) *TrainingCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// SetVolunteerID sets the "volunteer" edge to the Volunteer entity by ID.
func (tc *TrainingCreate) SetVolunteerID(id uuid.UUID) *TrainingCreate {
	tc.mutation.SetVolunteerID(id)
	return tc
}

// SetNillableVolunteerID sets the "volunteer" edge to the Volunteer entity by ID if the given value is not nil.
func (tc *TrainingCreate) SetNillableVolunteerID(id *uuid.UUID) *TrainingCreate {
	if id != nil {
		tc = tc.SetVolunteerID(*id)
	}
	return tc
}

// SetVolunteer sets the "volunteer" edge to the Volunteer entity.
func (tc *TrainingCreate) SetVolunteer(v *Volunteer) *TrainingCreate {
	return tc.SetVolunteerID(v.ID)
}

// SetCertID sets the "cert" edge to the Cert entity by ID.
func (tc *TrainingCreate) SetCertID(id uuid.UUID) *TrainingCreate {
	tc.mutation.SetCertID(id)
	return tc
}

// SetNillableCertID sets the "cert" edge to the Cert entity by ID if the given value is not nil.
func (tc *TrainingCreate) SetNillableCertID(id *uuid.UUID) *TrainingCreate {
	if id != nil {
		tc = tc.SetCertID(*id)
	}
	return tc
}

// SetCert sets the "cert" edge to the Cert entity.
func (tc *TrainingCreate) SetCert(c *Cert) *TrainingCreate {
	return tc.SetCertID(c.ID)
}

// Mutation returns the TrainingMutation object of the builder.
func (tc *TrainingCreate) Mutation() *TrainingMutation {
	return tc.mutation
}

// Save creates the Training in the database.
func (tc *TrainingCreate) Save(ctx context.Context) (*Training, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TrainingCreate) SaveX(ctx context.Context) *Training {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TrainingCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TrainingCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TrainingCreate) defaults() {
	if _, ok := tc.mutation.StartDate(); !ok {
		v := training.DefaultStartDate()
		tc.mutation.SetStartDate(v)
	}
	if _, ok := tc.mutation.IsCertified(); !ok {
		v := training.DefaultIsCertified
		tc.mutation.SetIsCertified(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := training.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TrainingCreate) check() error {
	if _, ok := tc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Training.start_date"`)}
	}
	if _, ok := tc.mutation.IsCertified(); !ok {
		return &ValidationError{Name: "is_certified", err: errors.New(`ent: missing required field "Training.is_certified"`)}
	}
	return nil
}

func (tc *TrainingCreate) sqlSave(ctx context.Context) (*Training, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TrainingCreate) createSpec() (*Training, *sqlgraph.CreateSpec) {
	var (
		_node = &Training{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(training.Table, sqlgraph.NewFieldSpec(training.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.StartDate(); ok {
		_spec.SetField(training.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := tc.mutation.EndDate(); ok {
		_spec.SetField(training.FieldEndDate, field.TypeTime, value)
		_node.EndDate = &value
	}
	if value, ok := tc.mutation.IsCertified(); ok {
		_spec.SetField(training.FieldIsCertified, field.TypeBool, value)
		_node.IsCertified = value
	}
	if nodes := tc.mutation.VolunteerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.VolunteerTable,
			Columns: []string{training.VolunteerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(volunteer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.training_volunteer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CertIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   training.CertTable,
			Columns: []string{training.CertColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cert.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.training_cert = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrainingCreateBulk is the builder for creating many Training entities in bulk.
type TrainingCreateBulk struct {
	config
	err      error
	builders []*TrainingCreate
}

// Save creates the Training entities in the database.
func (tcb *TrainingCreateBulk) Save(ctx context.Context) ([]*Training, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Training, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrainingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TrainingCreateBulk) SaveX(ctx context.Context) []*Training {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TrainingCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TrainingCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
