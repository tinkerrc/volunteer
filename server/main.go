package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	"connectrpc.com/authn"
	"entgo.io/ent/dialect"
	"github.com/auth0/go-auth0/authentication"
	"github.com/tinkerrc/volunteer/ent"
	"github.com/tinkerrc/volunteer/server/api"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	connectcors "connectrpc.com/cors"
	"github.com/rs/cors"

	_ "github.com/lib/pq"

	apiv1connect "github.com/tinkerrc/volunteer/proto/api/v1/apiv1connect" // generated by protoc-gen-connect-go
)

func main() {
	adminEmail := os.Getenv("ADMIN")
	if !strings.Contains(adminEmail, "@") {
		log.Fatalf("ADMIN environment variable does not contain valid email")
	}

	ctx := context.Background()
	auth0Domain := os.Getenv("AUTH0_DOMAIN")
	auth0ClientID := os.Getenv("AUTH0_CLIENT_ID")
	auth0ClientSecret := os.Getenv("AUTH0_CLIENT_SECRET")
	authAPI, err := authentication.New(ctx,
		auth0Domain,
		authentication.WithClientID(auth0ClientID),
		authentication.WithClientSecret(auth0ClientSecret),
	)
	if err != nil {
		log.Fatalf("failed to initialize auth0 client: %v", err)
	}

	host := os.Getenv("PG_HOST")
	port := os.Getenv("PG_PORT")
	user := os.Getenv("PG_USER")
	pass := os.Getenv("PG_PASS")
	dbname := os.Getenv("PG_DBNAME")
	dataSource := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable", host, port, user, pass, dbname)
	cl, err := ent.Open(dialect.Postgres, dataSource)
	if err != nil {
		log.Fatalf("failed connecting to database: %v", err)
	}
	defer cl.Close()
	log.Println("connected to database")

	if err := cl.Schema.Create(ctx); err != nil {
		log.Fatalf("migration failed: %v", err)
	}
	log.Println("schema migration done")

	server := &api.APIServer{Db: cl, AdminEmail: adminEmail, AuthAPI: authAPI}
	mux := http.NewServeMux()
	path, handler := apiv1connect.NewVolunteerServiceHandler(server)
	mux.Handle(path, handler)

	middleware := authn.NewMiddleware(api.Authenticate(cl))

	handler = h2c.NewHandler(mux, &http2.Server{})
	handler = middleware.Wrap(handler)
	handler = withCORS(handler)
	http.ListenAndServe(
		os.Getenv("ADDR"),
		handler,
	)
}

func withCORS(h http.Handler) http.Handler {
	middleware := cors.New(cors.Options{
		AllowedOrigins: []string{"yolovms.org"},
		AllowedMethods: connectcors.AllowedMethods(),
		AllowedHeaders: connectcors.AllowedHeaders(),
		ExposedHeaders: connectcors.ExposedHeaders(),
	})
	return middleware.Handler(h)
}
