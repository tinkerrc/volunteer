package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/event"
	"github.com/tinkerrc/volunteer/ent/eventvolunteer"
	"github.com/tinkerrc/volunteer/ent/volunteer"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) RemoveEventVolunteer(
	ctx context.Context,
	req *connect.Request[apiv1.RemoveEventVolunteerRequest],
) (*connect.Response[apiv1.RemoveEventVolunteerResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	m := req.Msg
	eid, err := uuid.Parse(m.EventId)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid event id"))
	}
	vid, err := uuid.Parse(m.VolunteerId)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid volunteer id"))
	}
	n, err := s.Db.EventVolunteer.Delete().Where(eventvolunteer.And(eventvolunteer.HasEventWith(event.ID(eid)), eventvolunteer.HasVolunteerWith(volunteer.ID(vid)))).Exec(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInternal, errors.New("could not remove volunteer from event"))
	}
	if n != 1 {
		return nil, connect.NewError(connect.CodeNotFound, errors.New("event volunteer not found"))
	}
	res := connect.NewResponse(&apiv1.RemoveEventVolunteerResponse{})
	return res, nil
}
