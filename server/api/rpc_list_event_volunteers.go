package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/event"
	"github.com/tinkerrc/volunteer/ent/eventvolunteer"
	"github.com/tinkerrc/volunteer/ent/volunteer"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) ListEventVolunteers(
	ctx context.Context,
	req *connect.Request[apiv1.ListEventVolunteersRequest],
) (*connect.Response[apiv1.ListEventVolunteersResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	m := req.Msg
	eid, err := uuid.Parse(m.EventId)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid event id"))
	}
	vs, err := s.Db.Volunteer.Query().Where(volunteer.HasVolunteerRecordsWith(eventvolunteer.HasEventWith(event.ID(eid)))).All(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInternal, errors.New("could not query volunteers"))
	}
	vProtos := make([]*apiv1.Volunteer, len(vs))
	for idx, v := range vs {
		vProto, err := s.getVolunteerProto(ctx, v)
		if err != nil {
			return nil, connect.NewError(connect.CodeInternal, errors.New("could not query volunteer time"))
		}
		vProtos[idx] = vProto
	}
	res := connect.NewResponse(&apiv1.ListEventVolunteersResponse{
		Volunteers: vProtos,
	})
	return res, nil
}
