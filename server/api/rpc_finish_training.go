package api

import (
	"context"
	"errors"
	"time"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/training"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) FinishTraining(
	ctx context.Context,
	req *connect.Request[apiv1.FinishTrainingRequest],
) (*connect.Response[apiv1.FinishTrainingResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodePermissionDenied, errors.New("unauthorized"))
	}
	m := req.Msg
	tid, err := uuid.Parse(m.Id)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid training id"))
	}
	_, err = s.Db.Training.UpdateOneID(tid).SetIsCertified(true).SetEndDate(time.Now()).Where(training.IsCertified(false)).Save(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("failed to update training"))
	}
	res := connect.NewResponse(&apiv1.FinishTrainingResponse{})
	return res, nil
}
