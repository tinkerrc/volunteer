package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"
	"google.golang.org/genproto/googleapis/type/interval"
	"google.golang.org/protobuf/types/known/timestamppb"

	"github.com/tinkerrc/volunteer/ent"
	"github.com/tinkerrc/volunteer/ent/event"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) ListEvents(
	ctx context.Context,
	req *connect.Request[apiv1.ListEventsRequest],
) (*connect.Response[apiv1.ListEventsResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	m := req.Msg
	if m.PageSize > 50 {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("page size too big"))
	}
	es, err := s.Db.Event.Query().
		Order(ent.Asc(event.FieldStart)).
		Limit(int(m.PageSize)).
		Offset(int(m.PageSize * m.PageNumber)).
		WithCerts().
		All(ctx)
	eProtos := make([]*apiv1.Event, len(es))
	for idx, e := range es {
		cids := make([]string, len(e.Edges.Certs))
		for idx, c := range e.Edges.Certs {
			cids[idx] = c.ID.String()
		}
		eProtos[idx] = &apiv1.Event{
			Id:          e.ID.String(),
			Name:        e.Name,
			Description: e.Description,
			Interval: &interval.Interval{
				StartTime: timestamppb.New(e.Start),
				EndTime:   timestamppb.New(e.End),
			},
			CertIds: cids,
		}
	}
	res := connect.NewResponse(&apiv1.ListEventsResponse{
		Events: eProtos,
	})
	return res, nil
}
