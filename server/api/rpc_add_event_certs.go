package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) AddEventCerts(
	ctx context.Context,
	req *connect.Request[apiv1.AddEventCertsRequest],
) (*connect.Response[apiv1.AddEventCertsResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	m := req.Msg
	if len(m.CertIds) == 0 {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("expected nonempty cert ids"))
	}
	eid, err := uuid.Parse(m.Id)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid event id"))
	}
	cids := make([]uuid.UUID, len(m.CertIds))
	for idx, cidStr := range m.CertIds {
		cid, err := uuid.Parse(cidStr)
		if err != nil {
			return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid cert id"))
		}
		cids[idx] = cid
	}
	_, err = s.Db.Event.UpdateOneID(eid).AddCertIDs(cids...).Save(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInternal, errors.New("could not add certs"))
	}
	res := connect.NewResponse(&apiv1.AddEventCertsResponse{})
	return res, nil
}
