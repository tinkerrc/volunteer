package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"
	"google.golang.org/genproto/googleapis/type/interval"
	"google.golang.org/protobuf/types/known/timestamppb"

	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/event"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) GetEvent(
	ctx context.Context,
	req *connect.Request[apiv1.GetEventRequest],
) (*connect.Response[apiv1.GetEventResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	m := req.Msg
	eid, err := uuid.Parse(m.Id)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid event id"))
	}
	e, err := s.Db.Event.Query().Where(event.ID(eid)).WithCerts().First(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeNotFound, errors.New("cert not found"))
	}
	cids := make([]string, len(e.Edges.Certs))
	for idx, c := range e.Edges.Certs {
		cids[idx] = c.ID.String()
	}
	res := connect.NewResponse(&apiv1.GetEventResponse{
		Event: &apiv1.Event{
			Id:          e.ID.String(),
			Name:        e.Name,
			Description: e.Description,
			Interval: &interval.Interval{
				StartTime: timestamppb.New(e.Start),
				EndTime:   timestamppb.New(e.End),
			},
			CertIds: cids,
		},
	})
	return res, nil
}
