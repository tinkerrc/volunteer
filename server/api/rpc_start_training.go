package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) StartTraining(
	ctx context.Context,
	req *connect.Request[apiv1.StartTrainingRequest],
) (*connect.Response[apiv1.StartTrainingResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodePermissionDenied, errors.New("unauthorized"))
	}
	m := req.Msg
	vid, err := uuid.Parse(m.VolunteerId)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid volunteer id"))
	}
	cid, err := uuid.Parse(m.CertId)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid cert id"))
	}
	t, err := s.Db.Training.Create().SetVolunteerID(vid).SetCertID(cid).Save(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("failed to start training"))
	}
	res := connect.NewResponse(&apiv1.StartTrainingResponse{
		Id: t.ID.String(),
	})
	return res, nil
}
