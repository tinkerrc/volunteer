package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent/event"
	"github.com/tinkerrc/volunteer/ent/eventvolunteer"
	"github.com/tinkerrc/volunteer/ent/volunteer"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) CreateTimeLog(
	ctx context.Context,
	req *connect.Request[apiv1.CreateTimeLogRequest],
) (*connect.Response[apiv1.CreateTimeLogResponse], error) {
	v, err := s.ensureVolunteer(ctx)
	if err != nil {
		return nil, err
	}

	m := req.Msg
	create := s.Db.TimeLog.Create().
		SetVolunteerID(v.ID).
		SetHours(int(m.Duration.Hours)).
		SetMinutes(int(m.Duration.Minutes)).
		SetDate(m.Date.AsTime())
	if m.EventId != nil {
		eid, err := uuid.Parse(*m.EventId)
		if err != nil {
			return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid event id"))
		}
		isEventVol, err := s.Db.EventVolunteer.Query().
			Where(
				eventvolunteer.HasVolunteerWith(volunteer.ID(v.ID)),
				eventvolunteer.HasEventWith(event.ID(eid)),
			).
			Exist(ctx)
		if err != nil || !isEventVol {
			return nil, connect.NewError(connect.CodePermissionDenied, errors.New("not an event volunteer"))
		}
		create = create.SetEventID(eid)
	}
	log, err := create.Save(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInternal, errors.New("cannot create time log"))
	}
	res := connect.NewResponse(&apiv1.CreateTimeLogResponse{
		Id: log.ID.String(),
	})
	return res, nil
}
