package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"
	"google.golang.org/protobuf/types/known/timestamppb"

	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent"
	"github.com/tinkerrc/volunteer/ent/timelog"
	"github.com/tinkerrc/volunteer/ent/volunteer"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) ListTimeLogs(
	ctx context.Context,
	req *connect.Request[apiv1.ListTimeLogsRequest],
) (*connect.Response[apiv1.ListTimeLogsResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	m := req.Msg
	if m.PageSize > 50 {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("page size too big"))
	}
	vid, err := uuid.Parse(m.VolunteerId)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid volunteer id"))
	}
	tls, err := s.Db.TimeLog.Query().
		Where(timelog.HasVolunteerWith(volunteer.ID(vid))).
		Order(ent.Desc(timelog.FieldDate)).
		WithEvent().
		Limit(int(m.PageSize)).
		Offset(int(m.PageSize * m.PageNumber)).
		All(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInternal, errors.New("cannot query time logs"))
	}
	tlProtos := make([]*apiv1.TimeLog, len(tls))
	for idx, tl := range tls {
		tlProtos[idx] = &apiv1.TimeLog{
			Id:          tl.ID.String(),
			VolunteerId: m.VolunteerId,
			Duration:    &apiv1.Duration{Hours: int32(tl.Hours), Minutes: int32(tl.Minutes)},
			Date:        timestamppb.New(tl.Date),
		}
		if tl.Edges.Event != nil {
			eid := tl.Edges.Event.ID.String()
			tlProtos[idx].EventId = &eid
		}
	}
	res := connect.NewResponse(&apiv1.ListTimeLogsResponse{
		Logs: tlProtos,
	})
	return res, nil
}
