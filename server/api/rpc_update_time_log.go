package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent"
	"github.com/tinkerrc/volunteer/ent/timelog"
	"github.com/tinkerrc/volunteer/ent/volunteer"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) UpdateTimeLog(
	ctx context.Context,
	req *connect.Request[apiv1.UpdateTimeLogRequest],
) (*connect.Response[apiv1.UpdateTimeLogResponse], error) {
	id, err := uuid.Parse(req.Msg.Id)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid id"))
	}
	err = s.ensureAdmin(ctx)
	if err == nil {
		return s.adminUpdateTimeLog(ctx, req, id)
	}
	return s.volunteerUpdateTimeLog(ctx, req, id)
}

func doUpdate(ctx context.Context, m *apiv1.UpdateTimeLogRequest, update *ent.TimeLogUpdateOne) error {
	if m.Duration != nil {
		update = update.SetHours(int(m.Duration.Hours)).SetMinutes(int(m.Duration.Minutes))
	}
	if m.Date != nil {
		update = update.SetDate(m.Date.AsTime())
	}
	_, err := update.Save(ctx)
	return err
}

func (s *APIServer) adminUpdateTimeLog(
	ctx context.Context,
	req *connect.Request[apiv1.UpdateTimeLogRequest],
	id uuid.UUID,
) (*connect.Response[apiv1.UpdateTimeLogResponse], error) {
	m := req.Msg
	update := s.Db.TimeLog.UpdateOneID(id)
	err := doUpdate(ctx, m, update)
	if err != nil {
		return nil, connect.NewError(connect.CodeNotFound, errors.New("not found"))
	}
	res := connect.NewResponse(&apiv1.UpdateTimeLogResponse{})
	return res, nil
}

func (s *APIServer) volunteerUpdateTimeLog(
	ctx context.Context,
	req *connect.Request[apiv1.UpdateTimeLogRequest],
	id uuid.UUID,
) (*connect.Response[apiv1.UpdateTimeLogResponse], error) {
	v, err := s.ensureVolunteer(ctx)
	if err != nil {
		return nil, err
	}
	update := s.Db.TimeLog.UpdateOneID(id).Where(timelog.HasVolunteerWith(volunteer.ID(v.ID)))
	err = doUpdate(ctx, req.Msg, update)
	if err != nil {
		return nil, connect.NewError(connect.CodeNotFound, errors.New("not found"))
	}
	res := connect.NewResponse(&apiv1.UpdateTimeLogResponse{})
	return res, nil
}
