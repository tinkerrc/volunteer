package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"
	"github.com/tinkerrc/volunteer/ent"
	"github.com/tinkerrc/volunteer/ent/timelog"
	"github.com/tinkerrc/volunteer/ent/volunteer"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) getVolunteerTotalTime(ctx context.Context, v *ent.Volunteer) (*apiv1.Duration, error) {
	var scanResult []struct {
		Hours, Minutes int32
	}
	err := s.Db.TimeLog.
		Query().
		Where(timelog.HasVolunteerWith(volunteer.ID(v.ID))).
		Aggregate(
			ent.Sum(timelog.FieldHours),
			ent.Sum(timelog.FieldMinutes),
		).
		Scan(ctx, &scanResult)
	if err != nil || len(scanResult) != 1 {
		return nil, connect.NewError(connect.CodeInternal, errors.New("cannot sum volunteer time"))
	}
	return &apiv1.Duration{Hours: scanResult[0].Hours, Minutes: scanResult[0].Minutes}, nil
}

func (s *APIServer) getVolunteerProto(ctx context.Context, v *ent.Volunteer) (*apiv1.Volunteer, error) {
	dur, err := s.getVolunteerTotalTime(ctx, v)
	if err != nil {
		return nil, err
	}
	p := &apiv1.Volunteer{
		Id:         v.ID.String(),
		FirstName:  v.FirstName,
		MiddleName: v.MiddleName,
		LastName:   v.LastName,
		Email:      v.Email,
		Phone:      v.Phone,
		Address:    v.Address,
		Notes:      v.Notes,
		TotalTime:  dur,
	}
	return p, nil
}
