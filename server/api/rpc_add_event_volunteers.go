package api

import (
	"context"
	"errors"
	"slices"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent"
	"github.com/tinkerrc/volunteer/ent/training"
	"github.com/tinkerrc/volunteer/ent/volunteer"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) AddEventVolunteers(
	ctx context.Context,
	req *connect.Request[apiv1.CreateEventVolunteerRequest],
) (*connect.Response[apiv1.CreateEventVolunteerResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	m := req.Msg
	eid, err := uuid.Parse(m.EventId)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid event id"))
	}
	vid, err := uuid.Parse(m.VolunteerId)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid volunteer id"))
	}
	e, err := s.Db.Event.Query().WithCerts().First(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeNotFound, errors.New("event not found"))
	}
	v, err := s.Db.Volunteer.Query().WithTrainings(func(tq *ent.TrainingQuery) {
		tq.Where(training.IsCertified(true))
		tq.WithCert()
	}).Where(volunteer.ID(vid)).First(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeNotFound, errors.New("volunteer not found"))
	}

	var requiredCertIds []string = make([]string, len(e.Edges.Certs))
	for idx, c := range e.Edges.Certs {
		requiredCertIds[idx] = c.ID.String()
	}
	var acquiredCertIds []string = make([]string, len(v.Edges.Trainings))
	for idx, t := range v.Edges.Trainings {
		acquiredCertIds[idx] = t.Edges.Cert.ID.String()
	}

	isQualified := true
	for _, cid := range requiredCertIds {
		if !slices.Contains(acquiredCertIds, cid) {
			isQualified = false
			break
		}
	}

	if !isQualified {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("unqualified volunteer"))
	}

	ev, err := s.Db.EventVolunteer.Create().SetEventID(eid).SetVolunteerID(vid).Save(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInternal, errors.New("could not add volunteer to event"))
	}
	res := connect.NewResponse(&apiv1.CreateEventVolunteerResponse{EventVolunteerId: ev.ID.String()})
	return res, nil
}
