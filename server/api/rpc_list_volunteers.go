package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"
	"entgo.io/ent/dialect/sql"

	"github.com/google/uuid"
	"github.com/tinkerrc/volunteer/ent"
	"github.com/tinkerrc/volunteer/ent/timelog"
	"github.com/tinkerrc/volunteer/ent/volunteer"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) ListVolunteers(
	ctx context.Context,
	req *connect.Request[apiv1.ListVolunteersRequest],
) (*connect.Response[apiv1.ListVolunteersResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	if req.Msg.PageSize > 50 {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("page size too big"))
	}
	var scanResults []struct {
		ID         uuid.UUID
		FirstName  string
		MiddleName string
		LastName   string
		Email      string
		Phone      string
		Address    string
		Notes      string
		Hours      int
		Minutes    int
	}
	s.Db.Volunteer.Query().
		Order(ent.Asc(volunteer.FieldFirstName, volunteer.FieldLastName)).
		Limit(int(req.Msg.PageSize)).
		Offset(int(req.Msg.PageNumber*req.Msg.PageSize)).
		Aggregate(
			func(s *sql.Selector) string {
				t := sql.Table(timelog.Table)
				s.Join(t).On(s.C(volunteer.FieldID), s.C(timelog.VolunteerColumn))
				return sql.As(sql.Sum(t.C(timelog.FieldHours)), "hours")
			},
			func(s *sql.Selector) string {
				t := sql.Table(timelog.Table)
				s.Join(t).On(s.C(volunteer.FieldID), s.C(timelog.VolunteerColumn))
				return sql.As(sql.Sum(t.C(timelog.FieldMinutes)), "minutes")
			},
		).
		Scan(ctx, &scanResults)
	var vs []*apiv1.Volunteer = make([]*apiv1.Volunteer, len(scanResults))
	for idx, sr := range scanResults {
		vs[idx] = &apiv1.Volunteer{
			Id:         sr.ID.String(),
			FirstName:  sr.FirstName,
			MiddleName: sr.MiddleName,
			LastName:   sr.LastName,
			Email:      sr.Email,
			Phone:      sr.Phone,
			Address:    sr.Address,
			Notes:      sr.Notes,
			TotalTime:  &apiv1.Duration{Hours: int32(sr.Hours), Minutes: int32(sr.Minutes)},
		}
	}

	res := connect.NewResponse(&apiv1.ListVolunteersResponse{
		Volunteers: vs,
	})
	return res, nil
}
