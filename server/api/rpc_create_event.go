package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) CreateEvent(
	ctx context.Context,
	req *connect.Request[apiv1.CreateEventRequest],
) (*connect.Response[apiv1.CreateEventResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	m := req.Msg
	cids := make([]uuid.UUID, len(m.CertIds))
	for idx, cidStr := range m.CertIds {
		cid, err := uuid.Parse(cidStr)
		if err != nil {
			return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("invalid cert id"))
		}
		cids[idx] = cid
	}
	e, err := s.Db.Event.Create().
		SetName(m.Name).
		SetDescription(m.Description).SetStart(m.Interval.StartTime.AsTime()).
		SetEnd(m.Interval.EndTime.AsTime()).
		AddCertIDs(cids...).
		Save(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInternal, errors.New("could not create event"))
	}
	res := connect.NewResponse(&apiv1.CreateEventResponse{
		Id: e.ID.String(),
	})
	return res, nil
}
