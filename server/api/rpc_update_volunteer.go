package api

import (
	"context"
	"errors"

	"connectrpc.com/connect"

	"github.com/google/uuid"
	apiv1 "github.com/tinkerrc/volunteer/proto/api/v1" // generated by protoc-gen-go
)

func (s *APIServer) UpdateVolunteer(
	ctx context.Context,
	req *connect.Request[apiv1.UpdateVolunteerRequest],
) (*connect.Response[apiv1.UpdateVolunteerResponse], error) {
	err := s.ensureAdmin(ctx)
	if err != nil {
		return nil, err
	}
	m := req.Msg
	id, err := uuid.Parse(m.Id)
	if err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, errors.New("bad uuid"))
	}
	update := s.Db.Volunteer.UpdateOneID(id)
	if m.FirstName != nil {
		update = update.SetFirstName(*m.FirstName)
	}
	if m.MiddleName != nil {
		update = update.SetMiddleName(*m.MiddleName)
	}
	if m.LastName != nil {
		update = update.SetLastName(*m.LastName)
	}
	if m.Phone != nil {
		update = update.SetPhone(*m.Phone)
	}
	if m.Address != nil {
		update = update.SetAddress(*m.Address)
	}
	if m.Notes != nil {
		update = update.SetNotes(*m.Notes)
	}
	_, err = update.Save(ctx)
	if err != nil {
		return nil, connect.NewError(connect.CodeInternal, errors.New("failed to update volunteer"))
	}
	res := connect.NewResponse(&apiv1.UpdateVolunteerResponse{})
	return res, nil
}
