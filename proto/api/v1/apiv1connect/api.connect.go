// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/api.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tinkerrc/volunteer/proto/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VolunteerServiceName is the fully-qualified name of the VolunteerService service.
	VolunteerServiceName = "api.v1.VolunteerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VolunteerServiceCreateVolunteerProcedure is the fully-qualified name of the VolunteerService's
	// CreateVolunteer RPC.
	VolunteerServiceCreateVolunteerProcedure = "/api.v1.VolunteerService/CreateVolunteer"
	// VolunteerServiceGetVolunteerProcedure is the fully-qualified name of the VolunteerService's
	// GetVolunteer RPC.
	VolunteerServiceGetVolunteerProcedure = "/api.v1.VolunteerService/GetVolunteer"
	// VolunteerServiceGetVolunteerProfileProcedure is the fully-qualified name of the
	// VolunteerService's GetVolunteerProfile RPC.
	VolunteerServiceGetVolunteerProfileProcedure = "/api.v1.VolunteerService/GetVolunteerProfile"
	// VolunteerServiceListVolunteersProcedure is the fully-qualified name of the VolunteerService's
	// ListVolunteers RPC.
	VolunteerServiceListVolunteersProcedure = "/api.v1.VolunteerService/ListVolunteers"
	// VolunteerServiceUpdateVolunteerProcedure is the fully-qualified name of the VolunteerService's
	// UpdateVolunteer RPC.
	VolunteerServiceUpdateVolunteerProcedure = "/api.v1.VolunteerService/UpdateVolunteer"
	// VolunteerServiceUpdateVolunteerProfileProcedure is the fully-qualified name of the
	// VolunteerService's UpdateVolunteerProfile RPC.
	VolunteerServiceUpdateVolunteerProfileProcedure = "/api.v1.VolunteerService/UpdateVolunteerProfile"
	// VolunteerServiceCreateTimeLogProcedure is the fully-qualified name of the VolunteerService's
	// CreateTimeLog RPC.
	VolunteerServiceCreateTimeLogProcedure = "/api.v1.VolunteerService/CreateTimeLog"
	// VolunteerServiceListTimeLogsProcedure is the fully-qualified name of the VolunteerService's
	// ListTimeLogs RPC.
	VolunteerServiceListTimeLogsProcedure = "/api.v1.VolunteerService/ListTimeLogs"
	// VolunteerServiceUpdateTimeLogProcedure is the fully-qualified name of the VolunteerService's
	// UpdateTimeLog RPC.
	VolunteerServiceUpdateTimeLogProcedure = "/api.v1.VolunteerService/UpdateTimeLog"
	// VolunteerServiceDeleteTimeLogProcedure is the fully-qualified name of the VolunteerService's
	// DeleteTimeLog RPC.
	VolunteerServiceDeleteTimeLogProcedure = "/api.v1.VolunteerService/DeleteTimeLog"
	// VolunteerServiceStartTrainingProcedure is the fully-qualified name of the VolunteerService's
	// StartTraining RPC.
	VolunteerServiceStartTrainingProcedure = "/api.v1.VolunteerService/StartTraining"
	// VolunteerServiceFinishTrainingProcedure is the fully-qualified name of the VolunteerService's
	// FinishTraining RPC.
	VolunteerServiceFinishTrainingProcedure = "/api.v1.VolunteerService/FinishTraining"
	// VolunteerServiceListTrainingsProcedure is the fully-qualified name of the VolunteerService's
	// ListTrainings RPC.
	VolunteerServiceListTrainingsProcedure = "/api.v1.VolunteerService/ListTrainings"
	// VolunteerServiceDeleteTrainingProcedure is the fully-qualified name of the VolunteerService's
	// DeleteTraining RPC.
	VolunteerServiceDeleteTrainingProcedure = "/api.v1.VolunteerService/DeleteTraining"
	// VolunteerServiceCreateCertProcedure is the fully-qualified name of the VolunteerService's
	// CreateCert RPC.
	VolunteerServiceCreateCertProcedure = "/api.v1.VolunteerService/CreateCert"
	// VolunteerServiceListCertsProcedure is the fully-qualified name of the VolunteerService's
	// ListCerts RPC.
	VolunteerServiceListCertsProcedure = "/api.v1.VolunteerService/ListCerts"
	// VolunteerServiceGetCertProcedure is the fully-qualified name of the VolunteerService's GetCert
	// RPC.
	VolunteerServiceGetCertProcedure = "/api.v1.VolunteerService/GetCert"
	// VolunteerServiceUpdateCertProcedure is the fully-qualified name of the VolunteerService's
	// UpdateCert RPC.
	VolunteerServiceUpdateCertProcedure = "/api.v1.VolunteerService/UpdateCert"
	// VolunteerServiceDeleteCertProcedure is the fully-qualified name of the VolunteerService's
	// DeleteCert RPC.
	VolunteerServiceDeleteCertProcedure = "/api.v1.VolunteerService/DeleteCert"
	// VolunteerServiceCreateEventProcedure is the fully-qualified name of the VolunteerService's
	// CreateEvent RPC.
	VolunteerServiceCreateEventProcedure = "/api.v1.VolunteerService/CreateEvent"
	// VolunteerServiceListEventsProcedure is the fully-qualified name of the VolunteerService's
	// ListEvents RPC.
	VolunteerServiceListEventsProcedure = "/api.v1.VolunteerService/ListEvents"
	// VolunteerServiceUpdateEventProcedure is the fully-qualified name of the VolunteerService's
	// UpdateEvent RPC.
	VolunteerServiceUpdateEventProcedure = "/api.v1.VolunteerService/UpdateEvent"
	// VolunteerServiceAddEventCertsProcedure is the fully-qualified name of the VolunteerService's
	// AddEventCerts RPC.
	VolunteerServiceAddEventCertsProcedure = "/api.v1.VolunteerService/AddEventCerts"
	// VolunteerServiceRemoveEventCertsProcedure is the fully-qualified name of the VolunteerService's
	// RemoveEventCerts RPC.
	VolunteerServiceRemoveEventCertsProcedure = "/api.v1.VolunteerService/RemoveEventCerts"
	// VolunteerServiceDeleteEventProcedure is the fully-qualified name of the VolunteerService's
	// DeleteEvent RPC.
	VolunteerServiceDeleteEventProcedure = "/api.v1.VolunteerService/DeleteEvent"
	// VolunteerServiceListEventVolunteersProcedure is the fully-qualified name of the
	// VolunteerService's ListEventVolunteers RPC.
	VolunteerServiceListEventVolunteersProcedure = "/api.v1.VolunteerService/ListEventVolunteers"
	// VolunteerServiceAddEventVolunteersProcedure is the fully-qualified name of the VolunteerService's
	// AddEventVolunteers RPC.
	VolunteerServiceAddEventVolunteersProcedure = "/api.v1.VolunteerService/AddEventVolunteers"
	// VolunteerServiceRemoveEventVolunteersProcedure is the fully-qualified name of the
	// VolunteerService's RemoveEventVolunteers RPC.
	VolunteerServiceRemoveEventVolunteersProcedure = "/api.v1.VolunteerService/RemoveEventVolunteers"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	volunteerServiceServiceDescriptor                      = v1.File_api_v1_api_proto.Services().ByName("VolunteerService")
	volunteerServiceCreateVolunteerMethodDescriptor        = volunteerServiceServiceDescriptor.Methods().ByName("CreateVolunteer")
	volunteerServiceGetVolunteerMethodDescriptor           = volunteerServiceServiceDescriptor.Methods().ByName("GetVolunteer")
	volunteerServiceGetVolunteerProfileMethodDescriptor    = volunteerServiceServiceDescriptor.Methods().ByName("GetVolunteerProfile")
	volunteerServiceListVolunteersMethodDescriptor         = volunteerServiceServiceDescriptor.Methods().ByName("ListVolunteers")
	volunteerServiceUpdateVolunteerMethodDescriptor        = volunteerServiceServiceDescriptor.Methods().ByName("UpdateVolunteer")
	volunteerServiceUpdateVolunteerProfileMethodDescriptor = volunteerServiceServiceDescriptor.Methods().ByName("UpdateVolunteerProfile")
	volunteerServiceCreateTimeLogMethodDescriptor          = volunteerServiceServiceDescriptor.Methods().ByName("CreateTimeLog")
	volunteerServiceListTimeLogsMethodDescriptor           = volunteerServiceServiceDescriptor.Methods().ByName("ListTimeLogs")
	volunteerServiceUpdateTimeLogMethodDescriptor          = volunteerServiceServiceDescriptor.Methods().ByName("UpdateTimeLog")
	volunteerServiceDeleteTimeLogMethodDescriptor          = volunteerServiceServiceDescriptor.Methods().ByName("DeleteTimeLog")
	volunteerServiceStartTrainingMethodDescriptor          = volunteerServiceServiceDescriptor.Methods().ByName("StartTraining")
	volunteerServiceFinishTrainingMethodDescriptor         = volunteerServiceServiceDescriptor.Methods().ByName("FinishTraining")
	volunteerServiceListTrainingsMethodDescriptor          = volunteerServiceServiceDescriptor.Methods().ByName("ListTrainings")
	volunteerServiceDeleteTrainingMethodDescriptor         = volunteerServiceServiceDescriptor.Methods().ByName("DeleteTraining")
	volunteerServiceCreateCertMethodDescriptor             = volunteerServiceServiceDescriptor.Methods().ByName("CreateCert")
	volunteerServiceListCertsMethodDescriptor              = volunteerServiceServiceDescriptor.Methods().ByName("ListCerts")
	volunteerServiceGetCertMethodDescriptor                = volunteerServiceServiceDescriptor.Methods().ByName("GetCert")
	volunteerServiceUpdateCertMethodDescriptor             = volunteerServiceServiceDescriptor.Methods().ByName("UpdateCert")
	volunteerServiceDeleteCertMethodDescriptor             = volunteerServiceServiceDescriptor.Methods().ByName("DeleteCert")
	volunteerServiceCreateEventMethodDescriptor            = volunteerServiceServiceDescriptor.Methods().ByName("CreateEvent")
	volunteerServiceListEventsMethodDescriptor             = volunteerServiceServiceDescriptor.Methods().ByName("ListEvents")
	volunteerServiceUpdateEventMethodDescriptor            = volunteerServiceServiceDescriptor.Methods().ByName("UpdateEvent")
	volunteerServiceAddEventCertsMethodDescriptor          = volunteerServiceServiceDescriptor.Methods().ByName("AddEventCerts")
	volunteerServiceRemoveEventCertsMethodDescriptor       = volunteerServiceServiceDescriptor.Methods().ByName("RemoveEventCerts")
	volunteerServiceDeleteEventMethodDescriptor            = volunteerServiceServiceDescriptor.Methods().ByName("DeleteEvent")
	volunteerServiceListEventVolunteersMethodDescriptor    = volunteerServiceServiceDescriptor.Methods().ByName("ListEventVolunteers")
	volunteerServiceAddEventVolunteersMethodDescriptor     = volunteerServiceServiceDescriptor.Methods().ByName("AddEventVolunteers")
	volunteerServiceRemoveEventVolunteersMethodDescriptor  = volunteerServiceServiceDescriptor.Methods().ByName("RemoveEventVolunteers")
)

// VolunteerServiceClient is a client for the api.v1.VolunteerService service.
type VolunteerServiceClient interface {
	// users
	// rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
	// rpc GetUser(GetUserRequest) returns (GetUserResponse);
	// rpc ListUsers(GetUserRequest) returns (GetUserResponse);
	// rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
	// === VOLUNTEERS
	// Registration
	CreateVolunteer(context.Context, *connect.Request[v1.CreateVolunteerRequest]) (*connect.Response[v1.CreateVolunteerResponse], error)
	// Requires user
	GetVolunteer(context.Context, *connect.Request[v1.GetVolunteerRequest]) (*connect.Response[v1.GetVolunteerResponse], error)
	// Requires volunteer
	GetVolunteerProfile(context.Context, *connect.Request[v1.GetVolunteerProfileRequest]) (*connect.Response[v1.GetVolunteerProfileResponse], error)
	// Requires user
	ListVolunteers(context.Context, *connect.Request[v1.ListVolunteersRequest]) (*connect.Response[v1.ListVolunteersResponse], error)
	// Requires user
	UpdateVolunteer(context.Context, *connect.Request[v1.UpdateVolunteerRequest]) (*connect.Response[v1.UpdateVolunteerResponse], error)
	// Requires volunteer
	UpdateVolunteerProfile(context.Context, *connect.Request[v1.UpdateVolunteerProfileRequest]) (*connect.Response[v1.UpdateVolunteerProfileResponse], error)
	// === TIME LOGS
	// Requires volunteer
	CreateTimeLog(context.Context, *connect.Request[v1.CreateTimeLogRequest]) (*connect.Response[v1.CreateTimeLogResponse], error)
	// Requires user or volunteer
	ListTimeLogs(context.Context, *connect.Request[v1.ListTimeLogsRequest]) (*connect.Response[v1.ListTimeLogsResponse], error)
	// Requires user or volunteer
	UpdateTimeLog(context.Context, *connect.Request[v1.UpdateTimeLogRequest]) (*connect.Response[v1.UpdateTimeLogResponse], error)
	// Requires user or volunteer
	DeleteTimeLog(context.Context, *connect.Request[v1.DeleteTimeLogRequest]) (*connect.Response[v1.DeleteTimeLogResponse], error)
	// === VOLUNTEER TRAINING
	// Requires user
	StartTraining(context.Context, *connect.Request[v1.StartTrainingRequest]) (*connect.Response[v1.StartTrainingResponse], error)
	// Requires user
	FinishTraining(context.Context, *connect.Request[v1.FinishTrainingRequest]) (*connect.Response[v1.FinishTrainingResponse], error)
	// Requires user
	ListTrainings(context.Context, *connect.Request[v1.ListTrainingsRequest]) (*connect.Response[v1.ListTrainingsResponse], error)
	// Requires user
	DeleteTraining(context.Context, *connect.Request[v1.DeleteTrainingRequest]) (*connect.Response[v1.DeleteTrainingResponse], error)
	// === CERTS
	// Requires user
	CreateCert(context.Context, *connect.Request[v1.CreateCertRequest]) (*connect.Response[v1.CreateCertResponse], error)
	// Requires user
	ListCerts(context.Context, *connect.Request[v1.ListCertsRequest]) (*connect.Response[v1.ListCertsResponse], error)
	// Requires user
	GetCert(context.Context, *connect.Request[v1.GetCertRequest]) (*connect.Response[v1.GetCertResponse], error)
	// Requires user
	UpdateCert(context.Context, *connect.Request[v1.UpdateCertRequest]) (*connect.Response[v1.UpdateCertResponse], error)
	// Requires user
	DeleteCert(context.Context, *connect.Request[v1.DeleteCertRequest]) (*connect.Response[v1.DeleteCertResponse], error)
	// === EVENTS
	// Requires user
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	// Requires user
	ListEvents(context.Context, *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error)
	// Requires user
	UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error)
	// Requires user
	AddEventCerts(context.Context, *connect.Request[v1.AddEventCertsRequest]) (*connect.Response[v1.AddEventCertsResponse], error)
	// Requires user
	RemoveEventCerts(context.Context, *connect.Request[v1.RemoveEventCertsRequest]) (*connect.Response[v1.RemoveEventCertsResponse], error)
	// Requires user
	DeleteEvent(context.Context, *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error)
	// === EVENT VOLUNTEERS
	ListEventVolunteers(context.Context, *connect.Request[v1.ListEventVolunteersRequest]) (*connect.Response[v1.ListEventVolunteersResponse], error)
	AddEventVolunteers(context.Context, *connect.Request[v1.AddEventVolunteersRequest]) (*connect.Response[v1.AddEventVolunteersResponse], error)
	RemoveEventVolunteers(context.Context, *connect.Request[v1.RemoveEventVolunteersRequest]) (*connect.Response[v1.RemoveEventVolunteersResponse], error)
}

// NewVolunteerServiceClient constructs a client for the api.v1.VolunteerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVolunteerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VolunteerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &volunteerServiceClient{
		createVolunteer: connect.NewClient[v1.CreateVolunteerRequest, v1.CreateVolunteerResponse](
			httpClient,
			baseURL+VolunteerServiceCreateVolunteerProcedure,
			connect.WithSchema(volunteerServiceCreateVolunteerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVolunteer: connect.NewClient[v1.GetVolunteerRequest, v1.GetVolunteerResponse](
			httpClient,
			baseURL+VolunteerServiceGetVolunteerProcedure,
			connect.WithSchema(volunteerServiceGetVolunteerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getVolunteerProfile: connect.NewClient[v1.GetVolunteerProfileRequest, v1.GetVolunteerProfileResponse](
			httpClient,
			baseURL+VolunteerServiceGetVolunteerProfileProcedure,
			connect.WithSchema(volunteerServiceGetVolunteerProfileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listVolunteers: connect.NewClient[v1.ListVolunteersRequest, v1.ListVolunteersResponse](
			httpClient,
			baseURL+VolunteerServiceListVolunteersProcedure,
			connect.WithSchema(volunteerServiceListVolunteersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateVolunteer: connect.NewClient[v1.UpdateVolunteerRequest, v1.UpdateVolunteerResponse](
			httpClient,
			baseURL+VolunteerServiceUpdateVolunteerProcedure,
			connect.WithSchema(volunteerServiceUpdateVolunteerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateVolunteerProfile: connect.NewClient[v1.UpdateVolunteerProfileRequest, v1.UpdateVolunteerProfileResponse](
			httpClient,
			baseURL+VolunteerServiceUpdateVolunteerProfileProcedure,
			connect.WithSchema(volunteerServiceUpdateVolunteerProfileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTimeLog: connect.NewClient[v1.CreateTimeLogRequest, v1.CreateTimeLogResponse](
			httpClient,
			baseURL+VolunteerServiceCreateTimeLogProcedure,
			connect.WithSchema(volunteerServiceCreateTimeLogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTimeLogs: connect.NewClient[v1.ListTimeLogsRequest, v1.ListTimeLogsResponse](
			httpClient,
			baseURL+VolunteerServiceListTimeLogsProcedure,
			connect.WithSchema(volunteerServiceListTimeLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTimeLog: connect.NewClient[v1.UpdateTimeLogRequest, v1.UpdateTimeLogResponse](
			httpClient,
			baseURL+VolunteerServiceUpdateTimeLogProcedure,
			connect.WithSchema(volunteerServiceUpdateTimeLogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTimeLog: connect.NewClient[v1.DeleteTimeLogRequest, v1.DeleteTimeLogResponse](
			httpClient,
			baseURL+VolunteerServiceDeleteTimeLogProcedure,
			connect.WithSchema(volunteerServiceDeleteTimeLogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startTraining: connect.NewClient[v1.StartTrainingRequest, v1.StartTrainingResponse](
			httpClient,
			baseURL+VolunteerServiceStartTrainingProcedure,
			connect.WithSchema(volunteerServiceStartTrainingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		finishTraining: connect.NewClient[v1.FinishTrainingRequest, v1.FinishTrainingResponse](
			httpClient,
			baseURL+VolunteerServiceFinishTrainingProcedure,
			connect.WithSchema(volunteerServiceFinishTrainingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTrainings: connect.NewClient[v1.ListTrainingsRequest, v1.ListTrainingsResponse](
			httpClient,
			baseURL+VolunteerServiceListTrainingsProcedure,
			connect.WithSchema(volunteerServiceListTrainingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTraining: connect.NewClient[v1.DeleteTrainingRequest, v1.DeleteTrainingResponse](
			httpClient,
			baseURL+VolunteerServiceDeleteTrainingProcedure,
			connect.WithSchema(volunteerServiceDeleteTrainingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCert: connect.NewClient[v1.CreateCertRequest, v1.CreateCertResponse](
			httpClient,
			baseURL+VolunteerServiceCreateCertProcedure,
			connect.WithSchema(volunteerServiceCreateCertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCerts: connect.NewClient[v1.ListCertsRequest, v1.ListCertsResponse](
			httpClient,
			baseURL+VolunteerServiceListCertsProcedure,
			connect.WithSchema(volunteerServiceListCertsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCert: connect.NewClient[v1.GetCertRequest, v1.GetCertResponse](
			httpClient,
			baseURL+VolunteerServiceGetCertProcedure,
			connect.WithSchema(volunteerServiceGetCertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCert: connect.NewClient[v1.UpdateCertRequest, v1.UpdateCertResponse](
			httpClient,
			baseURL+VolunteerServiceUpdateCertProcedure,
			connect.WithSchema(volunteerServiceUpdateCertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCert: connect.NewClient[v1.DeleteCertRequest, v1.DeleteCertResponse](
			httpClient,
			baseURL+VolunteerServiceDeleteCertProcedure,
			connect.WithSchema(volunteerServiceDeleteCertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+VolunteerServiceCreateEventProcedure,
			connect.WithSchema(volunteerServiceCreateEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listEvents: connect.NewClient[v1.ListEventsRequest, v1.ListEventsResponse](
			httpClient,
			baseURL+VolunteerServiceListEventsProcedure,
			connect.WithSchema(volunteerServiceListEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateEvent: connect.NewClient[v1.UpdateEventRequest, v1.UpdateEventResponse](
			httpClient,
			baseURL+VolunteerServiceUpdateEventProcedure,
			connect.WithSchema(volunteerServiceUpdateEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addEventCerts: connect.NewClient[v1.AddEventCertsRequest, v1.AddEventCertsResponse](
			httpClient,
			baseURL+VolunteerServiceAddEventCertsProcedure,
			connect.WithSchema(volunteerServiceAddEventCertsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeEventCerts: connect.NewClient[v1.RemoveEventCertsRequest, v1.RemoveEventCertsResponse](
			httpClient,
			baseURL+VolunteerServiceRemoveEventCertsProcedure,
			connect.WithSchema(volunteerServiceRemoveEventCertsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteEvent: connect.NewClient[v1.DeleteEventRequest, v1.DeleteEventResponse](
			httpClient,
			baseURL+VolunteerServiceDeleteEventProcedure,
			connect.WithSchema(volunteerServiceDeleteEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listEventVolunteers: connect.NewClient[v1.ListEventVolunteersRequest, v1.ListEventVolunteersResponse](
			httpClient,
			baseURL+VolunteerServiceListEventVolunteersProcedure,
			connect.WithSchema(volunteerServiceListEventVolunteersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addEventVolunteers: connect.NewClient[v1.AddEventVolunteersRequest, v1.AddEventVolunteersResponse](
			httpClient,
			baseURL+VolunteerServiceAddEventVolunteersProcedure,
			connect.WithSchema(volunteerServiceAddEventVolunteersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeEventVolunteers: connect.NewClient[v1.RemoveEventVolunteersRequest, v1.RemoveEventVolunteersResponse](
			httpClient,
			baseURL+VolunteerServiceRemoveEventVolunteersProcedure,
			connect.WithSchema(volunteerServiceRemoveEventVolunteersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// volunteerServiceClient implements VolunteerServiceClient.
type volunteerServiceClient struct {
	createVolunteer        *connect.Client[v1.CreateVolunteerRequest, v1.CreateVolunteerResponse]
	getVolunteer           *connect.Client[v1.GetVolunteerRequest, v1.GetVolunteerResponse]
	getVolunteerProfile    *connect.Client[v1.GetVolunteerProfileRequest, v1.GetVolunteerProfileResponse]
	listVolunteers         *connect.Client[v1.ListVolunteersRequest, v1.ListVolunteersResponse]
	updateVolunteer        *connect.Client[v1.UpdateVolunteerRequest, v1.UpdateVolunteerResponse]
	updateVolunteerProfile *connect.Client[v1.UpdateVolunteerProfileRequest, v1.UpdateVolunteerProfileResponse]
	createTimeLog          *connect.Client[v1.CreateTimeLogRequest, v1.CreateTimeLogResponse]
	listTimeLogs           *connect.Client[v1.ListTimeLogsRequest, v1.ListTimeLogsResponse]
	updateTimeLog          *connect.Client[v1.UpdateTimeLogRequest, v1.UpdateTimeLogResponse]
	deleteTimeLog          *connect.Client[v1.DeleteTimeLogRequest, v1.DeleteTimeLogResponse]
	startTraining          *connect.Client[v1.StartTrainingRequest, v1.StartTrainingResponse]
	finishTraining         *connect.Client[v1.FinishTrainingRequest, v1.FinishTrainingResponse]
	listTrainings          *connect.Client[v1.ListTrainingsRequest, v1.ListTrainingsResponse]
	deleteTraining         *connect.Client[v1.DeleteTrainingRequest, v1.DeleteTrainingResponse]
	createCert             *connect.Client[v1.CreateCertRequest, v1.CreateCertResponse]
	listCerts              *connect.Client[v1.ListCertsRequest, v1.ListCertsResponse]
	getCert                *connect.Client[v1.GetCertRequest, v1.GetCertResponse]
	updateCert             *connect.Client[v1.UpdateCertRequest, v1.UpdateCertResponse]
	deleteCert             *connect.Client[v1.DeleteCertRequest, v1.DeleteCertResponse]
	createEvent            *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	listEvents             *connect.Client[v1.ListEventsRequest, v1.ListEventsResponse]
	updateEvent            *connect.Client[v1.UpdateEventRequest, v1.UpdateEventResponse]
	addEventCerts          *connect.Client[v1.AddEventCertsRequest, v1.AddEventCertsResponse]
	removeEventCerts       *connect.Client[v1.RemoveEventCertsRequest, v1.RemoveEventCertsResponse]
	deleteEvent            *connect.Client[v1.DeleteEventRequest, v1.DeleteEventResponse]
	listEventVolunteers    *connect.Client[v1.ListEventVolunteersRequest, v1.ListEventVolunteersResponse]
	addEventVolunteers     *connect.Client[v1.AddEventVolunteersRequest, v1.AddEventVolunteersResponse]
	removeEventVolunteers  *connect.Client[v1.RemoveEventVolunteersRequest, v1.RemoveEventVolunteersResponse]
}

// CreateVolunteer calls api.v1.VolunteerService.CreateVolunteer.
func (c *volunteerServiceClient) CreateVolunteer(ctx context.Context, req *connect.Request[v1.CreateVolunteerRequest]) (*connect.Response[v1.CreateVolunteerResponse], error) {
	return c.createVolunteer.CallUnary(ctx, req)
}

// GetVolunteer calls api.v1.VolunteerService.GetVolunteer.
func (c *volunteerServiceClient) GetVolunteer(ctx context.Context, req *connect.Request[v1.GetVolunteerRequest]) (*connect.Response[v1.GetVolunteerResponse], error) {
	return c.getVolunteer.CallUnary(ctx, req)
}

// GetVolunteerProfile calls api.v1.VolunteerService.GetVolunteerProfile.
func (c *volunteerServiceClient) GetVolunteerProfile(ctx context.Context, req *connect.Request[v1.GetVolunteerProfileRequest]) (*connect.Response[v1.GetVolunteerProfileResponse], error) {
	return c.getVolunteerProfile.CallUnary(ctx, req)
}

// ListVolunteers calls api.v1.VolunteerService.ListVolunteers.
func (c *volunteerServiceClient) ListVolunteers(ctx context.Context, req *connect.Request[v1.ListVolunteersRequest]) (*connect.Response[v1.ListVolunteersResponse], error) {
	return c.listVolunteers.CallUnary(ctx, req)
}

// UpdateVolunteer calls api.v1.VolunteerService.UpdateVolunteer.
func (c *volunteerServiceClient) UpdateVolunteer(ctx context.Context, req *connect.Request[v1.UpdateVolunteerRequest]) (*connect.Response[v1.UpdateVolunteerResponse], error) {
	return c.updateVolunteer.CallUnary(ctx, req)
}

// UpdateVolunteerProfile calls api.v1.VolunteerService.UpdateVolunteerProfile.
func (c *volunteerServiceClient) UpdateVolunteerProfile(ctx context.Context, req *connect.Request[v1.UpdateVolunteerProfileRequest]) (*connect.Response[v1.UpdateVolunteerProfileResponse], error) {
	return c.updateVolunteerProfile.CallUnary(ctx, req)
}

// CreateTimeLog calls api.v1.VolunteerService.CreateTimeLog.
func (c *volunteerServiceClient) CreateTimeLog(ctx context.Context, req *connect.Request[v1.CreateTimeLogRequest]) (*connect.Response[v1.CreateTimeLogResponse], error) {
	return c.createTimeLog.CallUnary(ctx, req)
}

// ListTimeLogs calls api.v1.VolunteerService.ListTimeLogs.
func (c *volunteerServiceClient) ListTimeLogs(ctx context.Context, req *connect.Request[v1.ListTimeLogsRequest]) (*connect.Response[v1.ListTimeLogsResponse], error) {
	return c.listTimeLogs.CallUnary(ctx, req)
}

// UpdateTimeLog calls api.v1.VolunteerService.UpdateTimeLog.
func (c *volunteerServiceClient) UpdateTimeLog(ctx context.Context, req *connect.Request[v1.UpdateTimeLogRequest]) (*connect.Response[v1.UpdateTimeLogResponse], error) {
	return c.updateTimeLog.CallUnary(ctx, req)
}

// DeleteTimeLog calls api.v1.VolunteerService.DeleteTimeLog.
func (c *volunteerServiceClient) DeleteTimeLog(ctx context.Context, req *connect.Request[v1.DeleteTimeLogRequest]) (*connect.Response[v1.DeleteTimeLogResponse], error) {
	return c.deleteTimeLog.CallUnary(ctx, req)
}

// StartTraining calls api.v1.VolunteerService.StartTraining.
func (c *volunteerServiceClient) StartTraining(ctx context.Context, req *connect.Request[v1.StartTrainingRequest]) (*connect.Response[v1.StartTrainingResponse], error) {
	return c.startTraining.CallUnary(ctx, req)
}

// FinishTraining calls api.v1.VolunteerService.FinishTraining.
func (c *volunteerServiceClient) FinishTraining(ctx context.Context, req *connect.Request[v1.FinishTrainingRequest]) (*connect.Response[v1.FinishTrainingResponse], error) {
	return c.finishTraining.CallUnary(ctx, req)
}

// ListTrainings calls api.v1.VolunteerService.ListTrainings.
func (c *volunteerServiceClient) ListTrainings(ctx context.Context, req *connect.Request[v1.ListTrainingsRequest]) (*connect.Response[v1.ListTrainingsResponse], error) {
	return c.listTrainings.CallUnary(ctx, req)
}

// DeleteTraining calls api.v1.VolunteerService.DeleteTraining.
func (c *volunteerServiceClient) DeleteTraining(ctx context.Context, req *connect.Request[v1.DeleteTrainingRequest]) (*connect.Response[v1.DeleteTrainingResponse], error) {
	return c.deleteTraining.CallUnary(ctx, req)
}

// CreateCert calls api.v1.VolunteerService.CreateCert.
func (c *volunteerServiceClient) CreateCert(ctx context.Context, req *connect.Request[v1.CreateCertRequest]) (*connect.Response[v1.CreateCertResponse], error) {
	return c.createCert.CallUnary(ctx, req)
}

// ListCerts calls api.v1.VolunteerService.ListCerts.
func (c *volunteerServiceClient) ListCerts(ctx context.Context, req *connect.Request[v1.ListCertsRequest]) (*connect.Response[v1.ListCertsResponse], error) {
	return c.listCerts.CallUnary(ctx, req)
}

// GetCert calls api.v1.VolunteerService.GetCert.
func (c *volunteerServiceClient) GetCert(ctx context.Context, req *connect.Request[v1.GetCertRequest]) (*connect.Response[v1.GetCertResponse], error) {
	return c.getCert.CallUnary(ctx, req)
}

// UpdateCert calls api.v1.VolunteerService.UpdateCert.
func (c *volunteerServiceClient) UpdateCert(ctx context.Context, req *connect.Request[v1.UpdateCertRequest]) (*connect.Response[v1.UpdateCertResponse], error) {
	return c.updateCert.CallUnary(ctx, req)
}

// DeleteCert calls api.v1.VolunteerService.DeleteCert.
func (c *volunteerServiceClient) DeleteCert(ctx context.Context, req *connect.Request[v1.DeleteCertRequest]) (*connect.Response[v1.DeleteCertResponse], error) {
	return c.deleteCert.CallUnary(ctx, req)
}

// CreateEvent calls api.v1.VolunteerService.CreateEvent.
func (c *volunteerServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// ListEvents calls api.v1.VolunteerService.ListEvents.
func (c *volunteerServiceClient) ListEvents(ctx context.Context, req *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error) {
	return c.listEvents.CallUnary(ctx, req)
}

// UpdateEvent calls api.v1.VolunteerService.UpdateEvent.
func (c *volunteerServiceClient) UpdateEvent(ctx context.Context, req *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error) {
	return c.updateEvent.CallUnary(ctx, req)
}

// AddEventCerts calls api.v1.VolunteerService.AddEventCerts.
func (c *volunteerServiceClient) AddEventCerts(ctx context.Context, req *connect.Request[v1.AddEventCertsRequest]) (*connect.Response[v1.AddEventCertsResponse], error) {
	return c.addEventCerts.CallUnary(ctx, req)
}

// RemoveEventCerts calls api.v1.VolunteerService.RemoveEventCerts.
func (c *volunteerServiceClient) RemoveEventCerts(ctx context.Context, req *connect.Request[v1.RemoveEventCertsRequest]) (*connect.Response[v1.RemoveEventCertsResponse], error) {
	return c.removeEventCerts.CallUnary(ctx, req)
}

// DeleteEvent calls api.v1.VolunteerService.DeleteEvent.
func (c *volunteerServiceClient) DeleteEvent(ctx context.Context, req *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error) {
	return c.deleteEvent.CallUnary(ctx, req)
}

// ListEventVolunteers calls api.v1.VolunteerService.ListEventVolunteers.
func (c *volunteerServiceClient) ListEventVolunteers(ctx context.Context, req *connect.Request[v1.ListEventVolunteersRequest]) (*connect.Response[v1.ListEventVolunteersResponse], error) {
	return c.listEventVolunteers.CallUnary(ctx, req)
}

// AddEventVolunteers calls api.v1.VolunteerService.AddEventVolunteers.
func (c *volunteerServiceClient) AddEventVolunteers(ctx context.Context, req *connect.Request[v1.AddEventVolunteersRequest]) (*connect.Response[v1.AddEventVolunteersResponse], error) {
	return c.addEventVolunteers.CallUnary(ctx, req)
}

// RemoveEventVolunteers calls api.v1.VolunteerService.RemoveEventVolunteers.
func (c *volunteerServiceClient) RemoveEventVolunteers(ctx context.Context, req *connect.Request[v1.RemoveEventVolunteersRequest]) (*connect.Response[v1.RemoveEventVolunteersResponse], error) {
	return c.removeEventVolunteers.CallUnary(ctx, req)
}

// VolunteerServiceHandler is an implementation of the api.v1.VolunteerService service.
type VolunteerServiceHandler interface {
	// users
	// rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
	// rpc GetUser(GetUserRequest) returns (GetUserResponse);
	// rpc ListUsers(GetUserRequest) returns (GetUserResponse);
	// rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
	// === VOLUNTEERS
	// Registration
	CreateVolunteer(context.Context, *connect.Request[v1.CreateVolunteerRequest]) (*connect.Response[v1.CreateVolunteerResponse], error)
	// Requires user
	GetVolunteer(context.Context, *connect.Request[v1.GetVolunteerRequest]) (*connect.Response[v1.GetVolunteerResponse], error)
	// Requires volunteer
	GetVolunteerProfile(context.Context, *connect.Request[v1.GetVolunteerProfileRequest]) (*connect.Response[v1.GetVolunteerProfileResponse], error)
	// Requires user
	ListVolunteers(context.Context, *connect.Request[v1.ListVolunteersRequest]) (*connect.Response[v1.ListVolunteersResponse], error)
	// Requires user
	UpdateVolunteer(context.Context, *connect.Request[v1.UpdateVolunteerRequest]) (*connect.Response[v1.UpdateVolunteerResponse], error)
	// Requires volunteer
	UpdateVolunteerProfile(context.Context, *connect.Request[v1.UpdateVolunteerProfileRequest]) (*connect.Response[v1.UpdateVolunteerProfileResponse], error)
	// === TIME LOGS
	// Requires volunteer
	CreateTimeLog(context.Context, *connect.Request[v1.CreateTimeLogRequest]) (*connect.Response[v1.CreateTimeLogResponse], error)
	// Requires user or volunteer
	ListTimeLogs(context.Context, *connect.Request[v1.ListTimeLogsRequest]) (*connect.Response[v1.ListTimeLogsResponse], error)
	// Requires user or volunteer
	UpdateTimeLog(context.Context, *connect.Request[v1.UpdateTimeLogRequest]) (*connect.Response[v1.UpdateTimeLogResponse], error)
	// Requires user or volunteer
	DeleteTimeLog(context.Context, *connect.Request[v1.DeleteTimeLogRequest]) (*connect.Response[v1.DeleteTimeLogResponse], error)
	// === VOLUNTEER TRAINING
	// Requires user
	StartTraining(context.Context, *connect.Request[v1.StartTrainingRequest]) (*connect.Response[v1.StartTrainingResponse], error)
	// Requires user
	FinishTraining(context.Context, *connect.Request[v1.FinishTrainingRequest]) (*connect.Response[v1.FinishTrainingResponse], error)
	// Requires user
	ListTrainings(context.Context, *connect.Request[v1.ListTrainingsRequest]) (*connect.Response[v1.ListTrainingsResponse], error)
	// Requires user
	DeleteTraining(context.Context, *connect.Request[v1.DeleteTrainingRequest]) (*connect.Response[v1.DeleteTrainingResponse], error)
	// === CERTS
	// Requires user
	CreateCert(context.Context, *connect.Request[v1.CreateCertRequest]) (*connect.Response[v1.CreateCertResponse], error)
	// Requires user
	ListCerts(context.Context, *connect.Request[v1.ListCertsRequest]) (*connect.Response[v1.ListCertsResponse], error)
	// Requires user
	GetCert(context.Context, *connect.Request[v1.GetCertRequest]) (*connect.Response[v1.GetCertResponse], error)
	// Requires user
	UpdateCert(context.Context, *connect.Request[v1.UpdateCertRequest]) (*connect.Response[v1.UpdateCertResponse], error)
	// Requires user
	DeleteCert(context.Context, *connect.Request[v1.DeleteCertRequest]) (*connect.Response[v1.DeleteCertResponse], error)
	// === EVENTS
	// Requires user
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	// Requires user
	ListEvents(context.Context, *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error)
	// Requires user
	UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error)
	// Requires user
	AddEventCerts(context.Context, *connect.Request[v1.AddEventCertsRequest]) (*connect.Response[v1.AddEventCertsResponse], error)
	// Requires user
	RemoveEventCerts(context.Context, *connect.Request[v1.RemoveEventCertsRequest]) (*connect.Response[v1.RemoveEventCertsResponse], error)
	// Requires user
	DeleteEvent(context.Context, *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error)
	// === EVENT VOLUNTEERS
	ListEventVolunteers(context.Context, *connect.Request[v1.ListEventVolunteersRequest]) (*connect.Response[v1.ListEventVolunteersResponse], error)
	AddEventVolunteers(context.Context, *connect.Request[v1.AddEventVolunteersRequest]) (*connect.Response[v1.AddEventVolunteersResponse], error)
	RemoveEventVolunteers(context.Context, *connect.Request[v1.RemoveEventVolunteersRequest]) (*connect.Response[v1.RemoveEventVolunteersResponse], error)
}

// NewVolunteerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVolunteerServiceHandler(svc VolunteerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	volunteerServiceCreateVolunteerHandler := connect.NewUnaryHandler(
		VolunteerServiceCreateVolunteerProcedure,
		svc.CreateVolunteer,
		connect.WithSchema(volunteerServiceCreateVolunteerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceGetVolunteerHandler := connect.NewUnaryHandler(
		VolunteerServiceGetVolunteerProcedure,
		svc.GetVolunteer,
		connect.WithSchema(volunteerServiceGetVolunteerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceGetVolunteerProfileHandler := connect.NewUnaryHandler(
		VolunteerServiceGetVolunteerProfileProcedure,
		svc.GetVolunteerProfile,
		connect.WithSchema(volunteerServiceGetVolunteerProfileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceListVolunteersHandler := connect.NewUnaryHandler(
		VolunteerServiceListVolunteersProcedure,
		svc.ListVolunteers,
		connect.WithSchema(volunteerServiceListVolunteersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceUpdateVolunteerHandler := connect.NewUnaryHandler(
		VolunteerServiceUpdateVolunteerProcedure,
		svc.UpdateVolunteer,
		connect.WithSchema(volunteerServiceUpdateVolunteerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceUpdateVolunteerProfileHandler := connect.NewUnaryHandler(
		VolunteerServiceUpdateVolunteerProfileProcedure,
		svc.UpdateVolunteerProfile,
		connect.WithSchema(volunteerServiceUpdateVolunteerProfileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceCreateTimeLogHandler := connect.NewUnaryHandler(
		VolunteerServiceCreateTimeLogProcedure,
		svc.CreateTimeLog,
		connect.WithSchema(volunteerServiceCreateTimeLogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceListTimeLogsHandler := connect.NewUnaryHandler(
		VolunteerServiceListTimeLogsProcedure,
		svc.ListTimeLogs,
		connect.WithSchema(volunteerServiceListTimeLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceUpdateTimeLogHandler := connect.NewUnaryHandler(
		VolunteerServiceUpdateTimeLogProcedure,
		svc.UpdateTimeLog,
		connect.WithSchema(volunteerServiceUpdateTimeLogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceDeleteTimeLogHandler := connect.NewUnaryHandler(
		VolunteerServiceDeleteTimeLogProcedure,
		svc.DeleteTimeLog,
		connect.WithSchema(volunteerServiceDeleteTimeLogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceStartTrainingHandler := connect.NewUnaryHandler(
		VolunteerServiceStartTrainingProcedure,
		svc.StartTraining,
		connect.WithSchema(volunteerServiceStartTrainingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceFinishTrainingHandler := connect.NewUnaryHandler(
		VolunteerServiceFinishTrainingProcedure,
		svc.FinishTraining,
		connect.WithSchema(volunteerServiceFinishTrainingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceListTrainingsHandler := connect.NewUnaryHandler(
		VolunteerServiceListTrainingsProcedure,
		svc.ListTrainings,
		connect.WithSchema(volunteerServiceListTrainingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceDeleteTrainingHandler := connect.NewUnaryHandler(
		VolunteerServiceDeleteTrainingProcedure,
		svc.DeleteTraining,
		connect.WithSchema(volunteerServiceDeleteTrainingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceCreateCertHandler := connect.NewUnaryHandler(
		VolunteerServiceCreateCertProcedure,
		svc.CreateCert,
		connect.WithSchema(volunteerServiceCreateCertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceListCertsHandler := connect.NewUnaryHandler(
		VolunteerServiceListCertsProcedure,
		svc.ListCerts,
		connect.WithSchema(volunteerServiceListCertsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceGetCertHandler := connect.NewUnaryHandler(
		VolunteerServiceGetCertProcedure,
		svc.GetCert,
		connect.WithSchema(volunteerServiceGetCertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceUpdateCertHandler := connect.NewUnaryHandler(
		VolunteerServiceUpdateCertProcedure,
		svc.UpdateCert,
		connect.WithSchema(volunteerServiceUpdateCertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceDeleteCertHandler := connect.NewUnaryHandler(
		VolunteerServiceDeleteCertProcedure,
		svc.DeleteCert,
		connect.WithSchema(volunteerServiceDeleteCertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceCreateEventHandler := connect.NewUnaryHandler(
		VolunteerServiceCreateEventProcedure,
		svc.CreateEvent,
		connect.WithSchema(volunteerServiceCreateEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceListEventsHandler := connect.NewUnaryHandler(
		VolunteerServiceListEventsProcedure,
		svc.ListEvents,
		connect.WithSchema(volunteerServiceListEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceUpdateEventHandler := connect.NewUnaryHandler(
		VolunteerServiceUpdateEventProcedure,
		svc.UpdateEvent,
		connect.WithSchema(volunteerServiceUpdateEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceAddEventCertsHandler := connect.NewUnaryHandler(
		VolunteerServiceAddEventCertsProcedure,
		svc.AddEventCerts,
		connect.WithSchema(volunteerServiceAddEventCertsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceRemoveEventCertsHandler := connect.NewUnaryHandler(
		VolunteerServiceRemoveEventCertsProcedure,
		svc.RemoveEventCerts,
		connect.WithSchema(volunteerServiceRemoveEventCertsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceDeleteEventHandler := connect.NewUnaryHandler(
		VolunteerServiceDeleteEventProcedure,
		svc.DeleteEvent,
		connect.WithSchema(volunteerServiceDeleteEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceListEventVolunteersHandler := connect.NewUnaryHandler(
		VolunteerServiceListEventVolunteersProcedure,
		svc.ListEventVolunteers,
		connect.WithSchema(volunteerServiceListEventVolunteersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceAddEventVolunteersHandler := connect.NewUnaryHandler(
		VolunteerServiceAddEventVolunteersProcedure,
		svc.AddEventVolunteers,
		connect.WithSchema(volunteerServiceAddEventVolunteersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	volunteerServiceRemoveEventVolunteersHandler := connect.NewUnaryHandler(
		VolunteerServiceRemoveEventVolunteersProcedure,
		svc.RemoveEventVolunteers,
		connect.WithSchema(volunteerServiceRemoveEventVolunteersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.VolunteerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VolunteerServiceCreateVolunteerProcedure:
			volunteerServiceCreateVolunteerHandler.ServeHTTP(w, r)
		case VolunteerServiceGetVolunteerProcedure:
			volunteerServiceGetVolunteerHandler.ServeHTTP(w, r)
		case VolunteerServiceGetVolunteerProfileProcedure:
			volunteerServiceGetVolunteerProfileHandler.ServeHTTP(w, r)
		case VolunteerServiceListVolunteersProcedure:
			volunteerServiceListVolunteersHandler.ServeHTTP(w, r)
		case VolunteerServiceUpdateVolunteerProcedure:
			volunteerServiceUpdateVolunteerHandler.ServeHTTP(w, r)
		case VolunteerServiceUpdateVolunteerProfileProcedure:
			volunteerServiceUpdateVolunteerProfileHandler.ServeHTTP(w, r)
		case VolunteerServiceCreateTimeLogProcedure:
			volunteerServiceCreateTimeLogHandler.ServeHTTP(w, r)
		case VolunteerServiceListTimeLogsProcedure:
			volunteerServiceListTimeLogsHandler.ServeHTTP(w, r)
		case VolunteerServiceUpdateTimeLogProcedure:
			volunteerServiceUpdateTimeLogHandler.ServeHTTP(w, r)
		case VolunteerServiceDeleteTimeLogProcedure:
			volunteerServiceDeleteTimeLogHandler.ServeHTTP(w, r)
		case VolunteerServiceStartTrainingProcedure:
			volunteerServiceStartTrainingHandler.ServeHTTP(w, r)
		case VolunteerServiceFinishTrainingProcedure:
			volunteerServiceFinishTrainingHandler.ServeHTTP(w, r)
		case VolunteerServiceListTrainingsProcedure:
			volunteerServiceListTrainingsHandler.ServeHTTP(w, r)
		case VolunteerServiceDeleteTrainingProcedure:
			volunteerServiceDeleteTrainingHandler.ServeHTTP(w, r)
		case VolunteerServiceCreateCertProcedure:
			volunteerServiceCreateCertHandler.ServeHTTP(w, r)
		case VolunteerServiceListCertsProcedure:
			volunteerServiceListCertsHandler.ServeHTTP(w, r)
		case VolunteerServiceGetCertProcedure:
			volunteerServiceGetCertHandler.ServeHTTP(w, r)
		case VolunteerServiceUpdateCertProcedure:
			volunteerServiceUpdateCertHandler.ServeHTTP(w, r)
		case VolunteerServiceDeleteCertProcedure:
			volunteerServiceDeleteCertHandler.ServeHTTP(w, r)
		case VolunteerServiceCreateEventProcedure:
			volunteerServiceCreateEventHandler.ServeHTTP(w, r)
		case VolunteerServiceListEventsProcedure:
			volunteerServiceListEventsHandler.ServeHTTP(w, r)
		case VolunteerServiceUpdateEventProcedure:
			volunteerServiceUpdateEventHandler.ServeHTTP(w, r)
		case VolunteerServiceAddEventCertsProcedure:
			volunteerServiceAddEventCertsHandler.ServeHTTP(w, r)
		case VolunteerServiceRemoveEventCertsProcedure:
			volunteerServiceRemoveEventCertsHandler.ServeHTTP(w, r)
		case VolunteerServiceDeleteEventProcedure:
			volunteerServiceDeleteEventHandler.ServeHTTP(w, r)
		case VolunteerServiceListEventVolunteersProcedure:
			volunteerServiceListEventVolunteersHandler.ServeHTTP(w, r)
		case VolunteerServiceAddEventVolunteersProcedure:
			volunteerServiceAddEventVolunteersHandler.ServeHTTP(w, r)
		case VolunteerServiceRemoveEventVolunteersProcedure:
			volunteerServiceRemoveEventVolunteersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVolunteerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVolunteerServiceHandler struct{}

func (UnimplementedVolunteerServiceHandler) CreateVolunteer(context.Context, *connect.Request[v1.CreateVolunteerRequest]) (*connect.Response[v1.CreateVolunteerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.CreateVolunteer is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) GetVolunteer(context.Context, *connect.Request[v1.GetVolunteerRequest]) (*connect.Response[v1.GetVolunteerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.GetVolunteer is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) GetVolunteerProfile(context.Context, *connect.Request[v1.GetVolunteerProfileRequest]) (*connect.Response[v1.GetVolunteerProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.GetVolunteerProfile is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) ListVolunteers(context.Context, *connect.Request[v1.ListVolunteersRequest]) (*connect.Response[v1.ListVolunteersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.ListVolunteers is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) UpdateVolunteer(context.Context, *connect.Request[v1.UpdateVolunteerRequest]) (*connect.Response[v1.UpdateVolunteerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.UpdateVolunteer is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) UpdateVolunteerProfile(context.Context, *connect.Request[v1.UpdateVolunteerProfileRequest]) (*connect.Response[v1.UpdateVolunteerProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.UpdateVolunteerProfile is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) CreateTimeLog(context.Context, *connect.Request[v1.CreateTimeLogRequest]) (*connect.Response[v1.CreateTimeLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.CreateTimeLog is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) ListTimeLogs(context.Context, *connect.Request[v1.ListTimeLogsRequest]) (*connect.Response[v1.ListTimeLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.ListTimeLogs is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) UpdateTimeLog(context.Context, *connect.Request[v1.UpdateTimeLogRequest]) (*connect.Response[v1.UpdateTimeLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.UpdateTimeLog is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) DeleteTimeLog(context.Context, *connect.Request[v1.DeleteTimeLogRequest]) (*connect.Response[v1.DeleteTimeLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.DeleteTimeLog is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) StartTraining(context.Context, *connect.Request[v1.StartTrainingRequest]) (*connect.Response[v1.StartTrainingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.StartTraining is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) FinishTraining(context.Context, *connect.Request[v1.FinishTrainingRequest]) (*connect.Response[v1.FinishTrainingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.FinishTraining is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) ListTrainings(context.Context, *connect.Request[v1.ListTrainingsRequest]) (*connect.Response[v1.ListTrainingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.ListTrainings is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) DeleteTraining(context.Context, *connect.Request[v1.DeleteTrainingRequest]) (*connect.Response[v1.DeleteTrainingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.DeleteTraining is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) CreateCert(context.Context, *connect.Request[v1.CreateCertRequest]) (*connect.Response[v1.CreateCertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.CreateCert is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) ListCerts(context.Context, *connect.Request[v1.ListCertsRequest]) (*connect.Response[v1.ListCertsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.ListCerts is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) GetCert(context.Context, *connect.Request[v1.GetCertRequest]) (*connect.Response[v1.GetCertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.GetCert is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) UpdateCert(context.Context, *connect.Request[v1.UpdateCertRequest]) (*connect.Response[v1.UpdateCertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.UpdateCert is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) DeleteCert(context.Context, *connect.Request[v1.DeleteCertRequest]) (*connect.Response[v1.DeleteCertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.DeleteCert is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.CreateEvent is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) ListEvents(context.Context, *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.ListEvents is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.UpdateEvent is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) AddEventCerts(context.Context, *connect.Request[v1.AddEventCertsRequest]) (*connect.Response[v1.AddEventCertsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.AddEventCerts is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) RemoveEventCerts(context.Context, *connect.Request[v1.RemoveEventCertsRequest]) (*connect.Response[v1.RemoveEventCertsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.RemoveEventCerts is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) DeleteEvent(context.Context, *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.DeleteEvent is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) ListEventVolunteers(context.Context, *connect.Request[v1.ListEventVolunteersRequest]) (*connect.Response[v1.ListEventVolunteersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.ListEventVolunteers is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) AddEventVolunteers(context.Context, *connect.Request[v1.AddEventVolunteersRequest]) (*connect.Response[v1.AddEventVolunteersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.AddEventVolunteers is not implemented"))
}

func (UnimplementedVolunteerServiceHandler) RemoveEventVolunteers(context.Context, *connect.Request[v1.RemoveEventVolunteersRequest]) (*connect.Response[v1.RemoveEventVolunteersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.VolunteerService.RemoveEventVolunteers is not implemented"))
}
